syntax = "proto3";

package envoy.extensions.common.matching.v4alpha;

import "envoy/config/common/matcher/v4alpha/matcher.proto";
import "envoy/config/core/v4alpha/extension.proto";

import "xds/type/matcher/v3/matcher.proto";

import "envoy/annotations/deprecation.proto";
import "udpa/annotations/status.proto";
import "udpa/annotations/versioning.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.common.matching.v4alpha";
option java_outer_classname = "ExtensionMatcherProto";
option java_multiple_files = true;
option (udpa.annotations.file_status).package_version_status = NEXT_MAJOR_VERSION_CANDIDATE;

// [#protodoc-title: Extension Matcher]

// Wrapper around an existing extension that provides an associated matcher. This allows
// decorating an existing extension with a matcher, which can be used to match against
// relevant protocol data.
//
// [#alpha:]
message ExtensionWithMatcher {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.extensions.common.matching.v3.ExtensionWithMatcher";

  // The associated matcher. This is deprecated in favor of xds_matcher.
  config.common.matcher.v4alpha.Matcher hidden_envoy_deprecated_matcher = 1
      [deprecated = true, (envoy.annotations.deprecated_at_minor_version) = "3.0"];

  // The associated matcher.
  xds.type.matcher.v3.Matcher xds_matcher = 3;

  // The underlying extension config.
  config.core.v4alpha.TypedExtensionConfig extension_config = 2
      [(validate.rules).message = {required: true}];
}
