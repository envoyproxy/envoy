syntax = "proto3";

package envoy.extensions.filters.http.on_demand.v3;

import "envoy/config/core/v3/config_source.proto";

import "google/protobuf/duration.proto";

import "udpa/annotations/status.proto";
import "udpa/annotations/versioning.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.http.on_demand.v3";
option java_outer_classname = "OnDemandProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/on_demand/v3;on_demandv3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: On Demand Discovery]
// On Demand Discovery :ref:`configuration overview <config_http_filters_on_demand>`.
// [#extension: envoy.filters.http.on_demand]
//
// .. warning::
//
//    Envoy currently only supports On-demand CDS when using Incremental-xDS and not State-of-the-World.
//

// Configuration of on-demand CDS.
message OnDemandCds {
  // A configuration source for the service that will be used for
  // on-demand cluster discovery.
  config.core.v3.ConfigSource source = 1;

  // xdstp:// resource locator for on-demand cluster collection.
  string resources_locator = 2;

  // The timeout for on demand cluster lookup. If not set, defaults to 5 seconds.
  google.protobuf.Duration timeout = 3;
}

// On Demand Discovery filter config.
message OnDemand {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.config.filter.http.on_demand.v2.OnDemand";

  // An optional configuration for on-demand cluster discovery
  // service. If not specified, the on-demand cluster discovery will
  // be disabled. When it's specified, the filter will pause the
  // request to an unknown cluster and will begin a cluster discovery
  // process. When the discovery is finished (successfully or not), the
  // request will be resumed for further processing.
  OnDemandCds odcds = 1;

  // Controls behavior for requests with body data during VH discovery.
  // 
  // **IMPORTANT LIMITATION**: When VH discovery brings in per-route filter
  // configuration overrides, requests with body data cannot use stream recreation
  // because it would lose the buffered request body. This creates inconsistent
  // behavior where:
  // 
  // - Bodyless requests (GET, HEAD, etc.) receive per-route config overrides ✓
  // - Requests with body (POST, PUT, etc.) do NOT receive per-route config overrides ✗
  // 
  // This setting allows you to choose the behavior for requests with body data:
  // 
  // - If ``false`` (default): Requests with body continue with original filter chain
  //   configuration to preserve body data. Per-route overrides are NOT applied.
  //   This is the safest option but creates inconsistent behavior.
  // 
  // - If ``true``: Requests with body will attempt stream recreation to apply
  //   per-route overrides, but this will LOSE the buffered request body data.
  //   Only enable this if you understand the data loss implications.
  // 
  // **Recommendation**: Keep this ``false`` unless you have a specific need for
  // consistent per-route configuration behavior and can tolerate request body loss.
  // The ideal solution is to make stream recreation work with buffered bodies,
  // but that requires significant architectural changes.
  bool allow_body_data_loss_for_per_route_config = 2;
}

// Per-route configuration for On Demand Discovery.
message PerRouteConfig {
  // An optional configuration for on-demand cluster discovery
  // service. If not specified, the on-demand cluster discovery will
  // be disabled. When it's specified, the filter will pause the
  // request to an unknown cluster and will begin a cluster discovery
  // process. When the discovery is finished (successfully or not), the
  // request will be resumed for further processing.
  OnDemandCds odcds = 1;
}
