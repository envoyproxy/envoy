syntax = "proto3";

package envoy.extensions.filters.http.transform.v3;

import "envoy/config/common/mutation_rules/v3/mutation_rules.proto";
import "envoy/config/core/v3/substitution_format_string.proto";

import "google/protobuf/wrappers.proto";

import "udpa/annotations/status.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.http.transform.v3";
option java_outer_classname = "TransformProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/transform/v3;transformv3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Transform filter configuration]
// Transform filter :ref:`configuration overview <config_http_filters_transform>` to perform
// HTTP header and body transformations.
// [#extension: envoy.filters.http.transform]

message Transform {
  // The header mutations to perform.
  // The :ref:`substitution format specifier <config_access_log_format>` could be applied here.
  // And except the commonly used format specifiers, there are some additional format specifiers
  // provided by the transform filter:
  //
  // * ``%RQ_BODY(X)%``: the request body. And ``X`` is the JSON pointer to extract a specific
  //   field from the JSON body. If ``X`` is empty, the whole body will be used.
  // * ``%RS_BODY(X)%``: the response body. And ``X`` is the JSON pointer to extract a specific
  //   field from the JSON body. If ``X`` is empty, the whole body will be used.
  repeated config.common.mutation_rules.v3.HeaderMutation headers_mutations = 1;

  // Body transformation configuration. If not set, no body transformation will be performed.
  // NOTE the ``RQ_BODY`` and ``RS_BODY`` format specifiers can also be used here.
  config.core.v3.SubstitutionFormatString body_format_string = 3;

  // If set the result of ``body_format_string`` will be treated as a patch and will be merged
  // to the existing body. If not set, the result of ``body_format_string`` will replace
  // the existing body.
  // True by default.
  google.protobuf.BoolValue patch_format_string = 4;
}

// Configuration for the transform filter. The request and response transformations are
// independent and could be configured separately.
// Only JSON body transformation is supported for now.
message TransformConfig {
  // Configuration for transforming request.
  Transform request_transform = 1;

  // Configuration for transforming response.
  Transform response_transform = 2;

  // If true and the request headers are transformed, Envoy will re-evaluate the target
  // cluster in the same route. Please ensure the cluster specifier in the route supports
  // dynamic evaluation, e.g., ``envoy.router.cluster_specifier_plugin.matcher``.
  //
  // Only one of ``clear_cluster_cache`` and ``clear_route_cache`` can be true.
  bool clear_cluster_cache = 3;

  // If true and the request headers are transformed, Envoy will clear the route cache for
  // the current request and force re-evaluation of the route. This is more expensive and
  // should only be used when the route match criteria depends on the transformed headers.
  //
  // Only one of ``clear_cluster_cache`` and ``clear_route_cache`` can be true.
  bool clear_route_cache = 4;
}
