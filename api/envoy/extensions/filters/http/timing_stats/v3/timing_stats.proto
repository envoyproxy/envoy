syntax = "proto3";

package envoy.extensions.filters.http.timing_stats.v3;

import "envoy/type/matcher/v3/string.proto";

import "google/protobuf/wrappers.proto";

import "udpa/annotations/status.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.http.timing_stats.v3";
option java_outer_classname = "TimingStatsProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/timing_stats/v3;timing_statsv3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Timing_stats]
// [#extension: envoy.filters.http.timing_stats]

message Config {
  message TagFormatString {
    string format_string = 1;

    // Valid values for this tag. If empty, any value is allowed. Must match at least 1 matcher.
    repeated type.matcher.v3.StringMatcher allowed_values = 2;
  }

  message TagValue {
    // onoeof these
    string fixed_string = 1;
    TagFormatString format_string = 2;
  }

  message Tag {
    string name = 1;
    TagValue value = 2;
  }

  message Stat {
    string name = 1 [(validate.rules).string = {min_len: 1}];
    repeated Tag tags = 2;
    google.protobuf.UInt32Value max_cardinality = 3;
  }


  enum TimeUnit {
    Milliseconds = 0;
    Microseconds = 1;
    Nanoseconds = 2;
  }

  message Histogram {
    Stat stat = 1;
    TimeUnit unit = 2;
    string value = 3; // format string; must evaluate to a number
  }

  // Increase the counter by the amount of `value`.
  message Counter {
    Stat stat = 1;

    // oneof
    string value_format_string = 2; // format string; must evaluate to a numeric value
    google.protobuf.UInt32Value value_fixed = 3;
  }

  // Increment the counter with described tags each time the tags match.
  // This only makes sense if at least one of the tags is TagFormatString
  message Event { // I don't love this name. Any better ideas?
    Stat stat = 1;
  }

  string stat_prefix = 1;
  google.protobuf.UInt32Value max_stats = 2; // Overall maximum number of stats from all types.
  repeated Histogram histograms = 3;
  repeated Counter counters = 4;
  repeated Event events = 5;
}
