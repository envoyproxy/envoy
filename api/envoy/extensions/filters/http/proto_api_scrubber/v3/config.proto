syntax = "proto3";

package envoy.extensions.filters.http.proto_api_scrubber.v3;

import "envoy/config/core/v3/base.proto";

import "xds/annotations/v3/status.proto";
import "xds/type/v3/cel.proto";

import "udpa/annotations/status.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.http.proto_api_scrubber.v3";
option java_outer_classname = "ConfigProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/proto_api_scrubber/v3;proto_api_scrubberv3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;
option (xds.annotations.v3.file_status).work_in_progress = true;

// [#protodoc-title: Proto API Scrubber]
// [#not-implemented-hide:] Implementation in progress.
// [#extension: envoy.filters.http.proto_api_scrubber]

// Overview
// --------
// ProtoApiScrubber filter supports filtering of the request and
// response payloads based on the configured field restrictions. A field
// restriction can be defined using a CEL expression string or via a unified
// matcher API. The filter evaluates the configured restriction for each field
// to produce the filtered output. This filter currently supports only field
// level restrictions. Restriction support for other proto elements (eg, message
// level restriction, method level restriction, etc.) are planned to be
// implemented in future.
//
// Design Doc
// ----------
//
// The design doc for this filter is available at:
// https://docs.google.com/document/d/1jgRe5mhucFRgmKYf-Ukk20jW8kusIo53U5bcF74GkK8/edit?usp=sharing
//
// Assumptions
// -----------
//
// This filter assumes the request and response payloads are backed by proto
// descriptors which are provided as part of the filter config.
//
//
// Process Flow
// ------------
// (I) Filter Initialization
// 1. Parse and check the CEL expressions in the filter config.
// 2. Store the filter config along with parsed CEL expressions (AST) in the
// filter class.
//
// (II) Request Path
// 1. Bind envoy attributes to variables of the AST.
// 2. Buffer the incoming data to build the complete request body.
// 3. Filter each field of the request by evaluating the corresponding AST.
//
// (III) Response Path
// 1. Buffer the incoming data to build the complete response body.
// 2. Filter each field of the response by evaluating the corresponding AST.
//
// Example
// -------
//
// API Proto Definition
// --------------------
//
// .. code-block:: proto
//
// package library;
//
// service BookService {
//   rpc GetBook(GetBookRequest) returns GetBookResponse;
// }
//
// message GetBookRequest {
//   // The id of the book.
//   string book_id = 1;
// }
//
// message GetBookResponse {
//   Book book = 1;
//
//   // A field containing debugging information which is expected to be
//   // visible only for the development team (i.e., USER_TYPE = DEV) and would
//   // be filtered out for other users.
//   string debug_info = 2;
// }
//
// message Book {
//   // The title of the book.
//   string title = 1;
//
//   // The author of the book.
//   string author = 2;
//
//   // The publisher of the book.
//   string publisher = 3;
//
//   // Debugging information about a book which is expected to be visible only
//   // for the development team (i.e., USER_TYPE = DEV) and would be filtered
//   out
//   // for other users.
//   string debug_info = 4;
// }
//
//
// Filter Config (in JSON)
// -----------------------
//
// .. code-block:: json
//
// {
//   "descriptor_set": {...},
//   "restrictions": {
//     "method_restrictions": {
//       "library.BookService.GetBook": {
//         "request_field_restrictions": {},
//         "response_field_restrictions": {
//           "debug_info": {
//             "restrictions":{
//               "cel_expr": "request.headers['X-User-Type'] == 'DEV'"
//             }
//           },
//           "book.debug_info": {
//             "restrictions":{
//               "cel_expr": "request.headers['X-User-Type'] == 'DEV'"
//             }
//           }
//         }
//       }
//     }
//   }
// }
//
//
// Request and Response
// --------------------
//
// Consider the following request headers and body received by the filter for
// the BookService.GetBook method:
//
// Request Headers
//
// .. code-block:: json
//
// {
//   "header1": "value1",
//   "header2": "value2",
//   "X-USER-TYPE": "PROD"
// }
//
// Request Body
//
// .. code-block:: json
//
// {
//   "book_id": ABC1234
// }
//
// And consider the following response body received by the filter corresponding
// to the above request:
//
// .. code-block:: json
//
// {
//   "book": {
//     "title": "Book Title",
//     "author": "Book Author",
//     "publisher": "Book Publisher",
//     "debug_info": "This books metadata is stored in database shard - 0004"
//   },
//   "debug_info": "Served from server with IP: 172.164.1.2"
// }
//
// The filtered response output by this filter will be the following:
//
// .. code-block:: json
//
// {
//   "book": {
//     "title": "Book Title",
//     "author": "Book Author",
//     "publisher": "Book Publisher"
//   }
// }
//
// Note that the fields ``debug_info`` and ``book.debug_info`` are filtered out
// from the response since it the configured restrictions (i.e., the CEL
// expressions) for these fields are not satisfied.
message ProtoApiScrubberConfig {
  // Specifies the filtering mode of this filter.
  // Currently only ``OVERRIDE`` mode is supported.
  enum FilteringMode {
    // Override the original request/response body with the filtered
    // request/response body.
    OVERRIDE = 0;
  }

  // The proto descriptor set for the proto services.
  DescriptorSet descriptor_set = 1;

  // Contains the restrictions for the supported proto elements.
  Restrictions restrictions = 2;

  FilteringMode filtering_mode = 3;
}

// Specifies the descriptor set for proto services.
message DescriptorSet {
  // It could be passed by a local file through ``Datasource.filename`` or
  // embedded in the ``Datasource.inline_bytes``.
  config.core.v3.DataSource data_source = 1;
}

// Contains the restrictions for the methods.
message Restrictions {
  // Specifies the method restrictions.
  // Key - Fully qualified method name e.g., ``endpoints.examples.bookstore.BookStore.GetShelf``.
  // Value - Method restrictions.
  map<string, MethodRestrictions> method_restrictions = 1;
}

// Contains the method restrictions which include the field level restrictions
// for the request and response fields.
message MethodRestrictions {
  // Restrictions that apply to request fields of the method.
  // Key - field mask like path of the field eg, foo.bar.baz
  // Value - Restrictions map containing the mapping from restriction name to
  // the restriction values.
  map<string, RestrictionConfig> request_field_restrictions = 1;

  // Restrictions that apply to response fields of the method.
  // Key - field mask like path of the field eg, foo.bar.baz
  // Value - Restrictions map containing the mapping from restriction name to
  // the restriction values.
  map<string, RestrictionConfig> response_field_restrictions = 2;
}

// The restriction configuration.
message RestrictionConfig {
  // A CEL (https://cel.dev/overview/cel-overview) expression denoting
  // the restriction. e.g., request.headers['X-User-Type'] == 'DEV'
  // For the list of all available attributes of Envoy, please refer to
  // https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/advanced/attributes
  xds.type.v3.CelExpression cel_expr = 1;
}
