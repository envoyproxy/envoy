syntax = "proto3";

package envoy.extensions.quic.connection_id_generator.quic_lb.v3;

import "envoy/config/core/v3/base.proto";
import "envoy/extensions/transport_sockets/tls/v3/secret.proto";

import "xds/annotations/v3/status.proto";

import "udpa/annotations/sensitive.proto";
import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.quic.connection_id_generator.quic_lb.v3";
option java_outer_classname = "ConfigProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/quic/connection_id_generator/quic_lb/v3;quic_lbv3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: QUIC-LB connection ID generator config]
// [#extension: envoy.quic.connection_id_generator.quic_lb]

// Configuration for a connection ID generator implementation for the QUIC-LB draft RFC for
// routable connection IDs.
// See https://datatracker.ietf.org/doc/html/draft-ietf-quic-load-balancers for details.
message Config {
  option (xds.annotations.v3.message_status).work_in_progress = true;

  // Use the unencrypted mode. This is useful for testing, but allows for linking different CIDs
  // for the same connection, and leaks information about the valid server IDs in use. This should
  // only be used for testing.
  bool unsafe_unencrypted_testing_mode = 1;

  // Must be at least 1 octet.
  // The length of server_id and nonce_length_bytes must be 19 or less.
  config.core.v3.DataSource server_id = 2 [(validate.rules).message = {required: true}];

  // The nonce length must be at least 4 bytes.
  // The length of server_id and nonce_length_bytes must be 19 bytes or less.
  uint32 nonce_length_bytes = 3 [(validate.rules).uint32 = {gte: 4, lte: 16}];

  // Encode the encrypted connection ID component into the first byte of the connection ID,
  // as defined in the RFC.
  bool self_encode_length = 4;

  // Configuration to fetch the encryption key and configuration version.
  //
  // The SDS service is for a :ref:`GenericSecret <envoy_v3_api_msg_extensions.transport_sockets.tls.v3.GenericSecret>`.
  // The data should populate :ref:`secrets <envoy_v3_api_field_extensions.transport_sockets.tls.v3.GenericSecret.secrets>`
  // with "key" containing the 16 byte encryption key, and "version" containing a 1 byte unsigned integer of value
  // less than 8.
  transport_sockets.tls.v3.SdsSecretConfig encryption_parmeters = 5 [(validate.rules).message = {required: true}];
}
