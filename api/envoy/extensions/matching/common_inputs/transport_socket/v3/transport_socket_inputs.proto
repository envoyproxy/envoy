syntax = "proto3";

package envoy.extensions.matching.common_inputs.transport_socket.v3;

import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.matching.common_inputs.transport_socket.v3";
option java_outer_classname = "TransportSocketInputsProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/matching/common_inputs/transport_socket/v3;transport_socketv3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Transport Socket Matching Inputs]

// Specifies that matching should be performed by the endpoint metadata.
// This input extracts metadata from the selected endpoint for transport socket selection.
// The metadata is extracted using a filter and path specification similar to
// :ref:`DynamicMetadataInput <envoy_v3_api_msg_extensions.matching.common_inputs.network.v3.DynamicMetadataInput>`.
//
// Example: Extract a metadata value for transport socket matching.
//
// .. code-block:: yaml
//
//   typed_config:
//     "@type": type.googleapis.com/envoy.extensions.matching.common_inputs.transport_socket.v3.EndpointMetadataInput
//     filter: "envoy.transport_socket_match"
//     path:
//       - key: "socket_type"
//
// This configuration extracts the value at path ``["envoy.transport_socket_match"]["socket_type"]``
// from the endpoint metadata for use in transport socket selection.
//
// [#extension: envoy.matching.inputs.endpoint_metadata]
message EndpointMetadataInput {
  // The filter name to retrieve the Struct from the endpoint metadata.
  // If not specified or empty, defaults to ``envoy.transport_socket_match``.
  string filter = 1;

  // The path to retrieve the Value from the Struct.
  // If empty, the entire filter metadata struct is used for matching.
  // Each path segment specifies a key to traverse in nested metadata structures.
  repeated PathSegment path = 2;

  // Specifies the segment in a path to retrieve value from Metadata.
  message PathSegment {
    oneof segment {
      option (validate.required) = true;

      // If specified, use the key to retrieve the value in a Struct.
      string key = 1 [(validate.rules).string = {min_len: 1}];
    }
  }
}

// Specifies that matching should be performed by the locality metadata.
// This input extracts metadata from the endpoint's locality for transport socket selection.
// The metadata is extracted using a filter and path specification similar to
// :ref:`DynamicMetadataInput <envoy_v3_api_msg_extensions.matching.common_inputs.network.v3.DynamicMetadataInput>`.
//
// Example: Extract a metadata value from locality for transport socket matching.
//
// .. code-block:: yaml
//
//   typed_config:
//     "@type": type.googleapis.com/envoy.extensions.matching.common_inputs.transport_socket.v3.LocalityMetadataInput
//     filter: "envoy.transport_socket_match"
//     path:
//       - key: "region"
//
// This configuration extracts the value at path ``["envoy.transport_socket_match"]["region"]``
// from the locality metadata for use in transport socket selection.
//
// [#extension: envoy.matching.inputs.locality_metadata]
message LocalityMetadataInput {
  // The filter name to retrieve the Struct from the locality metadata.
  // If not specified or empty, defaults to ``envoy.transport_socket_match``.
  string filter = 1;

  // The path to retrieve the Value from the Struct.
  // If empty, the entire filter metadata struct is used for matching.
  // Each path segment specifies a key to traverse in nested metadata structures.
  repeated PathSegment path = 2;

  // Specifies the segment in a path to retrieve value from Metadata.
  message PathSegment {
    oneof segment {
      option (validate.required) = true;

      // If specified, use the key to retrieve the value in a Struct.
      string key = 1 [(validate.rules).string = {min_len: 1}];
    }
  }
}

// Configuration for the transport socket name action.
// This action sets the name of the transport socket to use when the matcher matches.
// [#extension: envoy.matching.action.transport_socket.name]
message TransportSocketNameAction {
  // The name of the transport socket to use.
  // This name must reference a named transport socket in the cluster's transport_socket_matches.
  string name = 1 [(validate.rules).string = {min_len: 1}];
}
