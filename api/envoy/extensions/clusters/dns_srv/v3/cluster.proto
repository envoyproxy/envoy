syntax = "proto3";

package envoy.extensions.clusters.dns_srv.v3;

import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.clusters.dns_srv.v3";
option java_outer_classname = "ClusterProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/clusters/dns_srv/v3;dns_srvv3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Cluster Configuration Via SRV record]
// This cluster adds support for `DNS SRV <https://en.wikipedia.org/wiki/SRV_record>` discovery clusters.
//
// This cluster type is used to discover endpoints via DNS SRV records. The cluster will resolve the
// SRV name specified in the configuration, and will use the resolved endpoints as cluster endpoints.
//
// Example:
//
// .. code-block:: yaml
//
// clusters:
//   - name: unique_name
//     cluster_type:
//       name: envoy.clusters.dns_srv
//       typed_config:
//     	  "@type": "type.googleapis.com/envoy.extensions.clusters.dns_srv.v3.DnsSrvClusterConfig"
//     	  srv_name: _unique_name._tcp.example.com
//     respect_dns_ttl: true
//     typed_dns_resolver_config:
//       name: envoy.network.dns_resolver.cares
//       typed_config:
//         "@type": type.googleapis.com/envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig
//         resolvers:
//           - socket_address:
//               address: 127.0.0.1
//               port_value: 8600
// [#extension: envoy.clusters.dns_srv]

message DnsSrvClusterConfig {
  string srv_name = 1 [(validate.rules).string = {min_len: 1}];
}
