syntax = "proto3";

package envoy.extensions.transport_sockets.http_11_proxy.v3;

import "envoy/config/core/v3/base.proto";

import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.transport_sockets.http_11_proxy.v3";
option java_outer_classname = "UpstreamHttp11ConnectProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/transport_sockets/http_11_proxy/v3;http_11_proxyv3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Upstream HTTP/1.1 Proxy]
// [#extension: envoy.transport_sockets.http_11_proxy]

// Configuration for HTTP/1.1 proxy transport sockets.
//
// If this transport socket is configured and proxy information is configured, then:
// * Upstream connections will be directed to the specified proxy address rather
//   than the host's address
// * Upstream connections will have a raw HTTP/1.1 CONNECT header prefaced
//   to the payload, and 200 response stripped (if less than 200 bytes)
// * Plaintext HTTP/1.1 connections will be sent with a fully qualified URL.
//
// There are two primary ways to configure proxy information:
//
// 1. An intermediate filter adds the stream info necessary for proxying to the stream info (as the
// test filter does :repo:`here <test/integration/filters/header_to_proxy_filter.cc>`).
//
// ..note::
//   Configuration via stream info will only proxy TLS connections to the proxy address on port 443.
//
// 2. Setting :ref:`LbEndpoint.Metadata <envoy_api_field_endpoint.LbEndpoint.metadata>` or
// :ref:`LocalityLbEndpoints.Metadata
// <envoy_v3_api_field_config.endpoint.v3.LocalityLbEndpoints.metadata>` using the key
// "envoy.http11_proxy_transport_socket.proxy_address" and the proxy address in
// `config::core::v3::Address` format.
//
// This transport socket is not compatible with HTTP/3, plaintext HTTP/2, or raw TCP.
message Http11ProxyUpstreamTransport {
  // The underlying transport socket being wrapped.
  config.core.v3.TransportSocket transport_socket = 1 [(validate.rules).message = {required: true}];
}
