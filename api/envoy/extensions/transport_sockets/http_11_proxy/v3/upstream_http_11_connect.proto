syntax = "proto3";

package envoy.extensions.transport_sockets.http_11_proxy.v3;

import "envoy/config/core/v3/base.proto";

import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.transport_sockets.http_11_proxy.v3";
option java_outer_classname = "UpstreamHttp11ConnectProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/transport_sockets/http_11_proxy/v3;http_11_proxyv3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Upstream HTTP/1.1 Proxy]
// [#extension: envoy.transport_sockets.http_11_proxy]

// HTTP/1.1 proxy transport socket establishes an upstream connection to a proxy address
// instead of the target host's address. This behavior is triggered when the transport
// socket is configured and proxy information is provided.
//
// Behavior when proxying:
// =======================
// * Upstream connections to the proxy include a raw HTTP/1.1 CONNECT header before
//   the payload. A 200 response is stripped if it's under 200 bytes.
// * Plaintext HTTP/1.1 connections are sent with a fully qualified URL.
//
// Configuring proxy information:
// ==============================
// 1. An intermediate filter adds proxy-related stream info (similar to
//    :repo:`test/integration/filters/header_to_proxy_filter.cc <test/integration/filters/header_to_proxy_filter.cc>`).
// 2. Set "typed_filter_metadata" in :ref:`LbEndpoint.Metadata <envoy_v3_api_field_config.endpoint.v3.lbendpoint.metadata>` or :ref:`LocalityLbEndpoints.Metadata <envoy_v3_api_field_config.endpoint.v3.LocalityLbEndpoints.metadata>`.
//    using the key "envoy.http11_proxy_transport_socket.proxy_address" and the
//    proxy address in config::core::v3::Address format.
//
// Important considerations:
// =========================
// * Stream info configuration only proxies TLS connections to the proxy on port 443.
//   This maintains the original behavior.
//
message Http11ProxyUpstreamTransport {
  // The underlying transport socket being wrapped.
  config.core.v3.TransportSocket transport_socket = 1 [(validate.rules).message = {required: true}];
}
