syntax = "proto3";

package envoy.extensions.transport_sockets.http_11_proxy.v3;

import "envoy/config/core/v3/address.proto";
import "envoy/config/core/v3/base.proto";

import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.transport_sockets.http_11_proxy.v3";
option java_outer_classname = "UpstreamHttp11ConnectProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/transport_sockets/http_11_proxy/v3;http_11_proxyv3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Upstream HTTP/1.1 Proxy]
// [#extension: envoy.transport_sockets.http_11_proxy]

// Configuration for HTTP/1.1 proxy transport sockets.
//
// When the transport socket is configured, upstream connections will be directed to the specified
// proxy address rather than the host's address and will have a raw HTTP/1.1 CONNECT header prefaced
// to the payload, and 200 response stripped (if less than 200 bytes).
//
// The proxy address will first be read from the stream info set by an intermediate filter (as the test
// filter does :repo:`here <test/integration/filters/header_to_proxy_filter.cc>`). In the absence of
// the stream info metadata, the proxy address set in the 'proxy_address' field is used. In the absence
// of both, connections will not be proxied.
//
// .. warning::
//    For historical reasons, this transport socket will only proxy TLS traffic unless users
//    explicitly set the 'allow_non_tls' flag to true.
//
// .. warning::
//     This transport socket is not compatible with HTTP/3, plaintext HTTP/2.
message Http11ProxyUpstreamTransport {
  // The underlying transport socket being wrapped.
  config.core.v3.TransportSocket transport_socket = 1 [(validate.rules).message = {required: true}];

  // The address of the proxy to connect to. If set, stream info set by an intermediate filter will
  // be ignored.
  config.core.v3.SocketAddress proxy_address = 2;

  // If true, the transport socket will not exclusively proxy TLS.
  bool allow_non_tls = 3;
}
