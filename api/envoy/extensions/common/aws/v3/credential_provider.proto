syntax = "proto3";

package envoy.extensions.common.aws.v3;

import "udpa/annotations/sensitive.proto";
import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.common.aws.v3";
option java_outer_classname = "CredentialProviderProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/common/aws/v3;awsv3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: AWS common configuration]

// Configuration for AWS credential provider. Normally, this is optional and the credentials are
// retrieved from the environment or AWS configuration files by following the default credential
// provider chain. This is to support cases where the credentials need to be explicitly provided
// by the control plane.
message AwsCredentialProvider {
  // The option to use `AssumeRoleWithWebIdentity <https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithWebIdentity.html>`_.
  // If inline_credential is set, this is ignored.
  AssumeRoleWithWebIdentityCredentialProvider assume_role_with_web_identity = 1;

  // The option to use an inline credential.
  // If this is set, it takes precedence over assume_role_with_web_identity.
  InlineCredentialProvider inline_credential = 2;

  // The option to use 'IAM Roles Anywhere <https://docs.aws.amazon.com/rolesanywhere/latest/userguide/introduction.html>'_.
  IAMRolesAnywhereCredentialProvider iam_roles_anywhere = 3;
}

// Configuration to use an inline AWS credential. This is an equivalent to setting the well-known
// environment variables ``AWS_ACCESS_KEY_ID``, ``AWS_SECRET_ACCESS_KEY``, and the optional ``AWS_SESSION_TOKEN``.
message InlineCredentialProvider {
  // The AWS access key ID.
  string access_key_id = 1 [(validate.rules).string = {min_len: 1}];

  // The AWS secret access key.
  string secret_access_key = 2
      [(validate.rules).string = {min_len: 1}, (udpa.annotations.sensitive) = true];

  // The AWS session token. This is optional.
  string session_token = 3 [(udpa.annotations.sensitive) = true];
}

// Configuration to use `AssumeRoleWithWebIdentity <https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithWebIdentity.html>`_
// to get AWS credentials.
message AssumeRoleWithWebIdentityCredentialProvider {
  // The ARN of the role to assume.
  string role_arn = 1 [(validate.rules).string = {min_len: 1}];

  // The web identity token that is provided by the identity provider to assume the role.
  string web_identity_token = 2
      [(validate.rules).string = {min_len: 1}, (udpa.annotations.sensitive) = true];
}

// Configuration to use 'IAM Roles Anywhere <https://docs.aws.amazon.com/rolesanywhere/latest/userguide/introduction.html>'_
// to get AWS credentials.
message IAMRolesAnywhereCredentialProvider {
  // The ARN of the role to assume.
  string role_arn = 1 [(validate.rules).string = {min_len: 1}];
  core.DataSource certificate = 2;
  core.DataSource certificate_chain = 3;
  // The TLS private key.
  core.DataSource private_key = 4 [(udpa.annotations.sensitive) = true];
  string trust_anchor_arn = 5 [(validate.rules).string = {min_len: 1}];
  google.protobuf.Duration expiration_time = 6 [(validate.rules).duration = {
    lte {seconds: 3600}
    gte {seconds: 900}
  }];
}
