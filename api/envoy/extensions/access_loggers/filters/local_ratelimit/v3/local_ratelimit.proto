syntax = "proto3";

package envoy.extensions.access_loggers.filters.local_ratelimit.v3;

import "udpa/annotations/status.proto";
import "envoy/type/v3/token_bucket.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.access_loggers.filters.local_ratelimit.v3";
option java_outer_classname = "LocalRateLimitProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/access_loggers/filters/local_ratelimit/v3;localratelimitv3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: LocalRateLimitFilter]
// [#extension: envoy.access_loggers.extension_filters.local_ratelimit]

// Filters for rate limiting the access logs using token buckets.
// The token buckets are stored in a singleton map and looked up by key.
//  If no key is specified, the access log will use the global token bucket.
message LocalRateLimitFilter {
  // The key is used to find the token bucket. If not set, the access log will
  // use the global token bucket.
  string key = 1;

  // The token bucket configuration to use for rate limiting all
  // access logs. If the token is available, the access log will be allowed to
  // generate. If no tokens are available, the access log will be dropped.
  //
  // .. note::
  //   In the current implementation the token bucket's :ref:`fill_interval
  //   <envoy_v3_api_field_type.v3.TokenBucket.fill_interval>` must be >= 50ms
  //   to avoid too aggressive refills.
  type.v3.TokenBucket token_bucket = 2 [(validate.rules).message = {required: true}];
}