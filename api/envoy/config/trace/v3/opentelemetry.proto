syntax = "proto3";

package envoy.config.trace.v3;

import "envoy/config/core/v3/extension.proto";
import "envoy/config/core/v3/grpc_service.proto";
import "envoy/config/core/v3/http_service.proto";

import "google/protobuf/wrappers.proto";

import "udpa/annotations/migrate.proto";
import "udpa/annotations/status.proto";

option java_package = "io.envoyproxy.envoy.config.trace.v3";
option java_outer_classname = "OpentelemetryProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/config/trace/v3;tracev3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: OpenTelemetry tracer]

// Configuration for the OpenTelemetry tracer.
//  [#extension: envoy.tracers.opentelemetry]
// [#next-free-field: 8]
message OpenTelemetryConfig {
  // The upstream gRPC cluster that will receive OTLP traces.
  // Note that the tracer drops traces if the server does not read data fast enough.
  // This field can be left empty to disable reporting traces to the gRPC service.
  // Only one of ``grpc_service``, ``http_service`` may be used.
  core.v3.GrpcService grpc_service = 1
      [(udpa.annotations.field_migrate).oneof_promotion = "otlp_exporter"];

  // The upstream HTTP cluster that will receive OTLP traces.
  // This field can be left empty to disable reporting traces to the HTTP service.
  // Only one of ``grpc_service``, ``http_service`` may be used.
  //
  // .. note::
  //
  //   Note: The ``request_headers_to_add`` property in the OTLP HTTP exporter service
  //   does not support the :ref:`format specifier <config_access_log_format>` as used for
  //   :ref:`HTTP access logging <config_access_log>`.
  //   The values configured are added as HTTP headers on the OTLP export request
  //   without any formatting applied.
  core.v3.HttpService http_service = 3
      [(udpa.annotations.field_migrate).oneof_promotion = "otlp_exporter"];

  // The name for the service. This will be populated in the ResourceSpan Resource attributes.
  // If it is not provided, it will default to "unknown_service:envoy".
  string service_name = 2;

  // An ordered list of resource detectors
  // [#extension-category: envoy.tracers.opentelemetry.resource_detectors]
  repeated core.v3.TypedExtensionConfig resource_detectors = 4;

  // Specifies the sampler to be used by the OpenTelemetry tracer.
  // The configured sampler implements the Sampler interface defined by the OpenTelemetry specification.
  // This field can be left empty. In this case, the default Envoy sampling decision is used.
  //
  // See: `OpenTelemetry sampler specification <https://opentelemetry.io/docs/specs/otel/trace/sdk/#sampler>`_
  // [#extension-category: envoy.tracers.opentelemetry.samplers]
  core.v3.TypedExtensionConfig sampler = 5;

  // Envoy caches the span in memory when the OpenTelemetry backend service is temporarily unavailable.
  // This field specifies the maximum number of spans that can be cached. If not specified, the
  // default is 1024.
  google.protobuf.UInt32Value max_cache_size = 6;

  // List of trace context propagators to be used by the OpenTelemetry tracer.
  // This field configures which trace context propagation formats Envoy should support.
  //
  // **Extraction Behavior (Inbound Requests):**
  // Propagators are tried in the configured order. The first propagator that successfully
  // extracts valid trace context from incoming headers is used. This allows graceful fallback
  // between different propagation formats used by upstream services.
  //
  // **Injection Behavior (Outbound Requests):**
  // All configured propagators inject their respective headers into outgoing requests.
  // This maximizes compatibility with downstream services that may expect specific formats.
  //
  // **Configuration Priority (highest to lowest):**
  // 1. Explicit configuration (this field)
  // 2. ``OTEL_PROPAGATORS`` environment variable (comma-separated list)
  // 3. Default: ``["tracecontext"]`` for W3C Trace Context propagation
  //
  // **Supported Propagators:**
  //
  // * ``tracecontext``: W3C Trace Context propagation using ``traceparent`` and ``tracestate`` headers.
  //   This is the default and recommended format for new deployments.
  // * ``baggage``: W3C Baggage propagation using the ``baggage`` header. Enables cross-service
  //   metadata propagation throughout the request lifecycle.
  // * ``b3``: Zipkin B3 propagation with automatic format detection:
  //
  //   - Single-header format: ``b3: {trace-id}-{span-id}-{sampling-state}-{parent-span-id}``
  //   - Multi-header format: ``X-B3-TraceId``, ``X-B3-SpanId``, ``X-B3-Sampled``, etc.
  //
  //   Both formats are supported for extraction; injection uses both for maximum compatibility.
  //
  // **Configuration Examples:**
  //
  // W3C-only (default):
  //
  // .. code-block:: yaml
  //
  //   propagators: ["tracecontext"]
  //
  // Full interoperability setup:
  //
  // .. code-block:: yaml
  //
  //   propagators: ["tracecontext", "baggage", "b3"]
  //
  // **Environment Variable Usage:**
  //
  // .. code-block:: bash
  //
  //   export OTEL_PROPAGATORS=tracecontext,baggage,b3
  //
  // **Backward Compatibility:**
  // When no propagators are configured, the tracer defaults to W3C Trace Context only,
  // maintaining compatibility with existing OpenTelemetry deployments.
  repeated string propagators = 7;
}
