syntax = "proto3";

package envoy.config.core.v3;

import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.config.core.v3";
option java_outer_classname = "ProxyProtocolProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/config/core/v3;corev3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Proxy protocol]

message ProxyProtocolPassThroughTLVs {
  enum PassTLVsMatchType {
    // Pass all TLVs.
    INCLUDE_ALL = 0;

    // Pass specific TLVs defined in tlv_type.
    INCLUDE = 1;
  }

  // The strategy to pass through TLVs. Default is INCLUDE_ALL.
  // If INCLUDE_ALL is set, all TLVs will be passed through no matter the tlv_type field.
  PassTLVsMatchType match_type = 1;

  // The TLV types that are applied based on match_type.
  // TLV type is defined as uint8_t in proxy protocol. See `the spec
  // <https://www.haproxy.org/download/2.1/doc/proxy-protocol.txt>`_ for details.
  repeated uint32 tlv_type = 2 [(validate.rules).repeated = {items {uint32 {lt: 256}}}];
}

// Represents a single Type-Length-Value (TLV) entry.
message TlvEntry {
  // The type of the TLV. Must be a uint8 (0-255) as per the Proxy Protocol v2 specification.
  uint32 type = 1 [(validate.rules).uint32 = {lt: 256}];

  // The value of the TLV. Must be at least one byte long.
  bytes value = 2 [(validate.rules).bytes = {min_len: 1}];
}

message ProxyProtocolConfig {
  enum Version {
    // PROXY protocol version 1. Human readable format.
    V1 = 0;

    // PROXY protocol version 2. Binary format.
    V2 = 1;
  }

  // The PROXY protocol version to use. See https://www.haproxy.org/download/2.1/doc/proxy-protocol.txt for details
  Version version = 1;

  // This config controls which TLVs can be passed to upstream if it is Proxy Protocol
  // V2 header. If there is no setting for this field, no TLVs will be passed through.
  ProxyProtocolPassThroughTLVs pass_through_tlvs = 2;

  // Custom TLV metadata to be sent in the upstream PROXY protocol header. This field
  // is only valid when the version is V2. These TLVs can be defined both in the
  // endpoint host's typed metadata and at the config-level. In the case that the same
  // TLV is defined in both places, the endpoint host's typed metadata will take precedence.
  repeated TlvEntry added_tlvs = 3;
}
