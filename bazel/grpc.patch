diff --git a/BUILD b/BUILD
index fdc12602ed..617ad884cf 100644
--- a/BUILD
+++ b/BUILD
@@ -33,7 +33,7 @@ package(
     default_visibility = ["//visibility:public"],
     features = [
         "-parse_headers",
-        "layering_check",
+        "-layering_check",
     ],
 )
 
diff --git a/bazel/generate_cc.bzl b/bazel/generate_cc.bzl
index a2c7f3a1bb..cd023ebb06 100644
--- a/bazel/generate_cc.bzl
+++ b/bazel/generate_cc.bzl
@@ -134,7 +134,7 @@ def generate_cc_impl(ctx):
 
     # Include the output directory so that protoc puts the generated code in the
     # right directory.
-    arguments.append("--proto_path={0}{1}".format(dir_out, proto_root))
+    arguments.append("--proto_path={0}".format(dir_out))
     arguments += [_get_srcs_file_path(proto) for proto in protos]
 
     # create a list of well known proto files if the argument is non-None
diff --git a/src/core/BUILD b/src/core/BUILD
index 1acce192d0..c7c92db880 100644
--- a/src/core/BUILD
+++ b/src/core/BUILD
@@ -25,7 +25,7 @@ licenses(["reciprocal"])
 package(
     default_visibility = ["//:__subpackages__"],
     features = [
-        "layering_check",
+        "-layering_check",
     ],
 )
 
diff --git a/src/core/lib/promise/detail/promise_factory.h b/src/core/lib/promise/detail/promise_factory.h
index 1e50774392..aed2826956 100644
--- a/src/core/lib/promise/detail/promise_factory.h
+++ b/src/core/lib/promise/detail/promise_factory.h
@@ -115,17 +115,16 @@ class Curried {
 // Promote a callable(A) -> T | Poll<T> to a PromiseFactory(A) -> Promise<T> by
 // capturing A.
 template <typename A, typename F>
-GPR_ATTRIBUTE_ALWAYS_INLINE_FUNCTION
-    absl::enable_if_t<!IsVoidCallable<ResultOf<F(A)>>::value,
-                      PromiseLike<Curried<RemoveCVRef<F>, A>>>
-    PromiseFactoryImpl(F&& f, A&& arg) {
+absl::enable_if_t<!IsVoidCallable<ResultOf<F(A)>>::value,
+                  PromiseLike<Curried<RemoveCVRef<F>, A>>>
+PromiseFactoryImpl(F&& f, A&& arg) {
   return Curried<RemoveCVRef<F>, A>(std::forward<F>(f), std::forward<A>(arg));
 }
 
 // Promote a callable() -> T|Poll<T> to a PromiseFactory(A) -> Promise<T>
 // by dropping the argument passed to the factory.
 template <typename A, typename F>
-GPR_ATTRIBUTE_ALWAYS_INLINE_FUNCTION absl::enable_if_t<
+absl::enable_if_t<
     !IsVoidCallable<ResultOf<F()>>::value, PromiseLike<RemoveCVRef<F>>>
 PromiseFactoryImpl(F f, A&&) {
   return PromiseLike<F>(std::move(f));
@@ -133,7 +132,7 @@ PromiseFactoryImpl(F f, A&&) {
 
 // Promote a callable() -> T|Poll<T> to a PromiseFactory() -> Promise<T>
 template <typename F>
-GPR_ATTRIBUTE_ALWAYS_INLINE_FUNCTION absl::enable_if_t<
+absl::enable_if_t<
     !IsVoidCallable<ResultOf<F()>>::value, PromiseLike<RemoveCVRef<F>>>
 PromiseFactoryImpl(F f) {
   return PromiseLike<F>(std::move(f));
@@ -141,7 +140,7 @@ PromiseFactoryImpl(F f) {
 
 // Given a callable(A) -> Promise<T>, name it a PromiseFactory and use it.
 template <typename A, typename F>
-GPR_ATTRIBUTE_ALWAYS_INLINE_FUNCTION absl::enable_if_t<
+absl::enable_if_t<
     IsVoidCallable<ResultOf<F(A)>>::value,
     PromiseLike<decltype(std::declval<F>()(std::declval<A>()))>>
 PromiseFactoryImpl(F&& f, A&& arg) {
@@ -150,7 +149,7 @@ PromiseFactoryImpl(F&& f, A&& arg) {
 
 // Given a callable(A) -> Promise<T>, name it a PromiseFactory and use it.
 template <typename A, typename F>
-GPR_ATTRIBUTE_ALWAYS_INLINE_FUNCTION absl::enable_if_t<
+absl::enable_if_t<
     IsVoidCallable<ResultOf<F(A)>>::value,
     PromiseLike<decltype(std::declval<F>()(std::declval<A>()))>>
 PromiseFactoryImpl(F& f, A&& arg) {
@@ -160,19 +159,17 @@ PromiseFactoryImpl(F& f, A&& arg) {
 // Given a callable() -> Promise<T>, promote it to a
 // PromiseFactory(A) -> Promise<T> by dropping the first argument.
 template <typename A, typename F>
-GPR_ATTRIBUTE_ALWAYS_INLINE_FUNCTION
-    absl::enable_if_t<IsVoidCallable<ResultOf<F()>>::value,
+absl::enable_if_t<IsVoidCallable<ResultOf<F()>>::value,
                       PromiseLike<decltype(std::declval<F>()())>>
-    PromiseFactoryImpl(F&& f, A&&) {
+PromiseFactoryImpl(F&& f, A&&) {
   return f();
 }
 
 // Given a callable() -> Promise<T>, name it a PromiseFactory and use it.
 template <typename F>
-GPR_ATTRIBUTE_ALWAYS_INLINE_FUNCTION
-    absl::enable_if_t<IsVoidCallable<ResultOf<F()>>::value,
+absl::enable_if_t<IsVoidCallable<ResultOf<F()>>::value,
                       PromiseLike<decltype(std::declval<F>()())>>
-    PromiseFactoryImpl(F&& f) {
+PromiseFactoryImpl(F&& f) {
   return f();
 }
 
@@ -186,10 +183,10 @@ class OncePromiseFactory {
   using Promise =
       decltype(PromiseFactoryImpl(std::move(f_), std::declval<A>()));
 
-  GPR_ATTRIBUTE_ALWAYS_INLINE_FUNCTION explicit OncePromiseFactory(F f)
+  explicit OncePromiseFactory(F f)
       : f_(std::move(f)) {}
 
-  GPR_ATTRIBUTE_ALWAYS_INLINE_FUNCTION Promise Make(Arg&& a) {
+  Promise Make(Arg&& a) {
     return PromiseFactoryImpl(std::move(f_), std::forward<Arg>(a));
   }
 };
@@ -203,10 +200,10 @@ class OncePromiseFactory<void, F> {
   using Arg = void;
   using Promise = decltype(PromiseFactoryImpl(std::move(f_)));
 
-  GPR_ATTRIBUTE_ALWAYS_INLINE_FUNCTION explicit OncePromiseFactory(F f)
+  explicit OncePromiseFactory(F f)
       : f_(std::move(f)) {}
 
-  GPR_ATTRIBUTE_ALWAYS_INLINE_FUNCTION Promise Make() {
+  Promise Make() {
     return PromiseFactoryImpl(std::move(f_));
   }
 };
@@ -220,13 +217,13 @@ class RepeatedPromiseFactory {
   using Arg = A;
   using Promise = decltype(PromiseFactoryImpl(f_, std::declval<A>()));
 
-  GPR_ATTRIBUTE_ALWAYS_INLINE_FUNCTION explicit RepeatedPromiseFactory(F f)
+  explicit RepeatedPromiseFactory(F f)
       : f_(std::move(f)) {}
 
-  GPR_ATTRIBUTE_ALWAYS_INLINE_FUNCTION Promise Make(Arg&& a) const {
+  Promise Make(Arg&& a) const {
     return PromiseFactoryImpl(f_, std::forward<Arg>(a));
   }
-  GPR_ATTRIBUTE_ALWAYS_INLINE_FUNCTION Promise Make(Arg&& a) {
+  Promise Make(Arg&& a) {
     return PromiseFactoryImpl(f_, std::forward<Arg>(a));
   }
 };
@@ -240,13 +237,13 @@ class RepeatedPromiseFactory<void, F> {
   using Arg = void;
   using Promise = decltype(PromiseFactoryImpl(f_));
 
-  GPR_ATTRIBUTE_ALWAYS_INLINE_FUNCTION explicit RepeatedPromiseFactory(F f)
+  explicit RepeatedPromiseFactory(F f)
       : f_(std::move(f)) {}
 
-  GPR_ATTRIBUTE_ALWAYS_INLINE_FUNCTION Promise Make() const {
+  Promise Make() const {
     return PromiseFactoryImpl(f_);
   }
-  GPR_ATTRIBUTE_ALWAYS_INLINE_FUNCTION Promise Make() {
+  Promise Make() {
     return PromiseFactoryImpl(f_);
   }
 };
diff --git a/third_party/BUILD b/third_party/BUILD
index 77cb52d0fc..596b348ccd 100644
--- a/third_party/BUILD
+++ b/third_party/BUILD
@@ -18,19 +18,19 @@ package(default_visibility = ["//:__subpackages__"])
 
 alias(
     name = "libssl",
-    actual = "@boringssl//:ssl",
+    actual = "@envoy//bazel:boringssl",
     tags = ["manual"],
 )
 
 alias(
     name = "libcrypto",
-    actual = "@boringssl//:crypto",
+    actual = "@envoy//bazel:boringcrypto",
     tags = ["manual"],
 )
 
 alias(
     name = "madler_zlib",
-    actual = "@zlib//:zlib",
+    actual = "@envoy//bazel/foreign_cc:zlib",
     tags = ["manual"],
 )
 
@@ -61,7 +61,7 @@ alias(
 
 alias(
     name = "cares",
-    actual = "@com_github_cares_cares//:ares",
+    actual = "@envoy//bazel/foreign_cc:ares",
     tags = ["manual"],
 )
 
