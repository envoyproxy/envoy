From bc2a85e39fd55879b9baed51429c08b27d5514c8 Mon Sep 17 00:00:00 2001
From: Matt Leon <mattleon@google.com>
Date: Wed, 16 Jul 2025 16:55:02 -0400
Subject: [PATCH 1/8] Disable pointer compression

Pointer compression limits the maximum number of WasmVMs.

Signed-off-by: Matt Leon <mattleon@google.com>
---
 BUILD.bazel | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/BUILD.bazel b/BUILD.bazel
index 3f5a87d054e..0a693b7ee10 100644
--- a/BUILD.bazel
+++ b/BUILD.bazel
@@ -292,7 +292,7 @@ v8_int(
 # If no explicit value for v8_enable_pointer_compression, we set it to 'none'.
 v8_string(
     name = "v8_enable_pointer_compression",
-    default = "none",
+    default = "False",
 )
 
 # Default setting for v8_enable_pointer_compression.
-- 
2.50.0.727.gbf7dc18ff4-goog


From e9fb84e11334342ee8fcb50d7322412ab35e2ad0 Mon Sep 17 00:00:00 2001
From: Matt Leon <mattleon@google.com>
Date: Tue, 22 Jul 2025 10:53:33 -0400
Subject: [PATCH 2/8] Use already imported python dependencies

Signed-off-by: Matt Leon <mattleon@google.com>
---
 BUILD.bazel                                      | 2 +-
 third_party/inspector_protocol/code_generator.py | 2 ++
 2 files changed, 3 insertions(+), 1 deletion(-)

diff --git a/BUILD.bazel b/BUILD.bazel
index 0a693b7ee10..522f00555e0 100644
--- a/BUILD.bazel
+++ b/BUILD.bazel
@@ -4,7 +4,7 @@
 
 load("@bazel_skylib//lib:selects.bzl", "selects")
 load("@rules_python//python:defs.bzl", "py_binary", "py_test")
-load("@v8_python_deps//:requirements.bzl", "requirement")
+load("@base_pip3//:requirements.bzl", "requirement")
 load(
     "@v8//:bazel/defs.bzl",
     "v8_binary",
diff --git a/third_party/inspector_protocol/code_generator.py b/third_party/inspector_protocol/code_generator.py
index b1bedb58951..e85fe664618 100755
--- a/third_party/inspector_protocol/code_generator.py
+++ b/third_party/inspector_protocol/code_generator.py
@@ -16,6 +16,8 @@ try:
 except ImportError:
   import simplejson as json
 
+sys.path += [os.path.dirname(__file__)]
+
 import pdl
 
 try:
-- 
2.50.0.727.gbf7dc18ff4-goog


From 251ef6027d97bade5e5d8eb5b173baa849c163b8 Mon Sep 17 00:00:00 2001
From: Matt Leon <mattleon@google.com>
Date: Wed, 16 Jul 2025 20:29:10 -0400
Subject: [PATCH 3/8] Add build flags to make V8 compile with GCC

Signed-off-by: Matt Leon <mattleon@google.com>
---
 bazel/defs.bzl | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/bazel/defs.bzl b/bazel/defs.bzl
index 0539ea176ac..92c7aeb904f 100644
--- a/bazel/defs.bzl
+++ b/bazel/defs.bzl
@@ -117,6 +117,9 @@ def _default_args():
                 "-Wno-implicit-int-float-conversion",
                 "-Wno-deprecated-copy",
                 "-Wno-non-virtual-dtor",
+                "-Wno-invalid-offsetof",
+                "-Wno-dangling-pointer",
+                "-Wno-dangling-reference",
                 "-isystem .",
             ],
             "//conditions:default": [],
-- 
2.50.0.727.gbf7dc18ff4-goog


From e85e6b017a4843f660bf5331b389a57945a2c21d Mon Sep 17 00:00:00 2001
From: Matt Leon <mattleon@google.com>
Date: Tue, 22 Jul 2025 10:55:14 -0400
Subject: [PATCH 4/8] Add support for --define=no_debug_info=1

Signed-off-by: Matt Leon <mattleon@google.com>
---
 bazel/defs.bzl | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/bazel/defs.bzl b/bazel/defs.bzl
index 92c7aeb904f..937157ccb06 100644
--- a/bazel/defs.bzl
+++ b/bazel/defs.bzl
@@ -184,6 +184,11 @@ def _default_args():
         }) + select({
             ":should_add_rdynamic": ["-rdynamic"],
             "//conditions:default": [],
+        }) + select({
+            "@envoy//bazel:no_debug_info": [
+                "-g0",
+            ],
+            "//conditions:default": [],
         }),
     )
 
-- 
2.50.0.727.gbf7dc18ff4-goog


From b1d40bf065bb46a47cfe2eaf5d3477934f5f8c29 Mon Sep 17 00:00:00 2001
From: Matt Leon <mattleon@google.com>
Date: Tue, 22 Jul 2025 10:55:51 -0400
Subject: [PATCH 5/8] Allow compiling v8 on macOS 10.15 to 13.0. TODO(dio):
 Will remove this patch when
 https://bugs.chromium.org/p/v8/issues/detail?id=13428 is fixed.

Signed-off-by: Matt Leon <mattleon@google.com>
---
 bazel/defs.bzl | 12 ++++++++++++
 1 file changed, 12 insertions(+)

diff --git a/bazel/defs.bzl b/bazel/defs.bzl
index 937157ccb06..39663c97df4 100644
--- a/bazel/defs.bzl
+++ b/bazel/defs.bzl
@@ -189,6 +189,18 @@ def _default_args():
                 "-g0",
             ],
             "//conditions:default": [],
+        }) + select({
+            "@v8//bazel/config:is_macos": [
+                # The clang available on macOS catalina has a warning that isn't clean on v8 code.
+                "-Wno-range-loop-analysis",
+
+                # To supress warning on deprecated declaration on v8 code. For example:
+                # external/v8/src/base/platform/platform-darwin.cc:56:22: 'getsectdatafromheader_64'
+                # is deprecated: first deprecated in macOS 13.0.
+                # https://bugs.chromium.org/p/v8/issues/detail?id=13428.
+                "-Wno-deprecated-declarations",
+            ],
+            "//conditions:default": [],
         }),
     )
 
-- 
2.50.0.727.gbf7dc18ff4-goog


From 9ed4744c3aecf18f0cc546ea7f4ba7d8cca1f0e7 Mon Sep 17 00:00:00 2001
From: Matt Leon <mattleon@google.com>
Date: Wed, 16 Jul 2025 16:56:52 -0400
Subject: [PATCH 6/8] Don't expose Wasm C API (only Wasm C++ API).

Signed-off-by: Matt Leon <mattleon@google.com>
---
 src/wasm/c-api.cc | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/src/wasm/c-api.cc b/src/wasm/c-api.cc
index 05e4029f183..d705be96a16 100644
--- a/src/wasm/c-api.cc
+++ b/src/wasm/c-api.cc
@@ -2472,6 +2472,8 @@ WASM_EXPORT auto Instance::exports() const -> ownvec<Extern> {
 
 }  // namespace wasm
 
+#if 0
+
 // BEGIN FILE wasm-c.cc
 
 extern "C" {
@@ -3518,3 +3520,5 @@ wasm_instance_t* wasm_frame_instance(const wasm_frame_t* frame) {
 #undef WASM_DEFINE_SHARABLE_REF
 
 }  // extern "C"
+
+#endif
-- 
2.50.0.727.gbf7dc18ff4-goog


From 2d4bb2b8bff5a45fd0452912b936e2f9f463b001 Mon Sep 17 00:00:00 2001
From: Matt Leon <mattleon@google.com>
Date: Wed, 16 Jul 2025 20:04:05 -0400
Subject: [PATCH 7/8] Stub out vendored dependencies for bazel-sourced versions

Signed-off-by: Matt Leon <mattleon@google.com>
---
 BUILD.bazel | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/BUILD.bazel b/BUILD.bazel
index 522f00555e0..f775a934c17 100644
--- a/BUILD.bazel
+++ b/BUILD.bazel
@@ -4437,10 +4437,10 @@ v8_library(
         ":noicu/generated_torque_definitions",
     ],
     deps = [
-        ":lib_dragonbox",
-        "//third_party/fast_float/src:fast_float",
-        ":lib_fp16",
-        ":simdutf",
+        "@dragonbox//:dragonbox",
+        "@fast_float//:fast_float",
+        "@fp16//:FP16",
+        "@simdutf//:simdutf",
         ":v8_libbase",
         "@abseil-cpp//absl/container:btree",
         "@abseil-cpp//absl/container:flat_hash_map",
-- 
2.50.0.727.gbf7dc18ff4-goog


From 5c0418f72733f62242d0c83eaacdb5bfd91c1e67 Mon Sep 17 00:00:00 2001
From: Matt Leon <mattleon@google.com>
Date: Fri, 18 Jul 2025 17:28:42 -0400
Subject: [PATCH 8/8] Hack out atomic simd support in V8.

Atomic simdutf requires __cpp_lib_atomic_ref >= 201806, which is only
supported in clang libc++ 19+. The version of LLVM used in Envoy as of
2025-07-18 is libc++ 18, so this is not supported.

The simdutf documentation indicates this atomic form is not tested and
is not recommended for use:
https://github.com/simdutf/simdutf/blob/5d1b6248f29a8ed0eb90f79be268be41730e39f8/include/simdutf/implementation.h#L3066-L3068

In addition, this is in the implementation of a JS array buffer. Since
proxy-wasm-cpp-host does not make use of JS array buffers or shared
memory between web workers, we're stubbing it out.

Mostly reverts
https://github.com/v8/v8/commit/6d6c1e680c7b8ea5f62a76e9c3d88d3fb0a88df0.

Signed-off-by: Matt Leon <mattleon@google.com>
---
 bazel/defs.bzl                       |  2 +-
 src/builtins/builtins-typed-array.cc |  8 ++++++++
 src/objects/simd.cc                  | 10 ++++++++++
 3 files changed, 19 insertions(+), 1 deletion(-)

diff --git a/bazel/defs.bzl b/bazel/defs.bzl
index 39663c97df4..14b90ec6905 100644
--- a/bazel/defs.bzl
+++ b/bazel/defs.bzl
@@ -180,7 +180,7 @@ def _default_args():
                 "Advapi32.lib",
             ],
             "@v8//bazel/config:is_macos": ["-pthread"],
-            "//conditions:default": ["-Wl,--no-as-needed -ldl -latomic -pthread"],
+            "//conditions:default": ["-Wl,--no-as-needed -ldl -pthread"],
         }) + select({
             ":should_add_rdynamic": ["-rdynamic"],
             "//conditions:default": [],
diff --git a/src/builtins/builtins-typed-array.cc b/src/builtins/builtins-typed-array.cc
index 918cb873481..bc933e8dc1d 100644
--- a/src/builtins/builtins-typed-array.cc
+++ b/src/builtins/builtins-typed-array.cc
@@ -520,17 +520,21 @@ simdutf::result ArrayBufferSetFromBase64(
     DirectHandle<JSTypedArray> typed_array, size_t& output_length) {
   output_length = array_length;
   simdutf::result simd_result;
+#ifdef WANT_ATOMIC_REF
   if (typed_array->buffer()->is_shared()) {
     simd_result = simdutf::atomic_base64_to_binary_safe(
         reinterpret_cast<const T>(input_vector), input_length,
         reinterpret_cast<char*>(typed_array->DataPtr()), output_length,
         alphabet, last_chunk_handling, /*decode_up_to_bad_char*/ true);
   } else {
+#endif
     simd_result = simdutf::base64_to_binary_safe(
         reinterpret_cast<const T>(input_vector), input_length,
         reinterpret_cast<char*>(typed_array->DataPtr()), output_length,
         alphabet, last_chunk_handling, /*decode_up_to_bad_char*/ true);
+#ifdef WANT_ATOMIC_REF
   }
+#endif
 
   return simd_result;
 }
@@ -833,15 +837,19 @@ BUILTIN(Uint8ArrayPrototypeToBase64) {
     // 11. Return CodePointsToString(outAscii).
 
     size_t simd_result_size;
+#ifdef WANT_ATOMIC_REF
     if (uint8array->buffer()->is_shared()) {
       simd_result_size = simdutf::atomic_binary_to_base64(
           std::bit_cast<const char*>(uint8array->DataPtr()), length,
           reinterpret_cast<char*>(output->GetChars(no_gc)), alphabet);
     } else {
+#endif
       simd_result_size = simdutf::binary_to_base64(
           std::bit_cast<const char*>(uint8array->DataPtr()), length,
           reinterpret_cast<char*>(output->GetChars(no_gc)), alphabet);
+#ifdef WANT_ATOMIC_REF
     }
+#endif
     DCHECK_EQ(simd_result_size, output_length);
     USE(simd_result_size);
   }
diff --git a/src/objects/simd.cc b/src/objects/simd.cc
index 0ef570ceb7d..9217fa76072 100644
--- a/src/objects/simd.cc
+++ b/src/objects/simd.cc
@@ -477,6 +477,7 @@ void Uint8ArrayToHexSlow(const char* bytes, size_t length,
   }
 }
 
+#ifdef WANT_ATOMIC_REF
 void AtomicUint8ArrayToHexSlow(const char* bytes, size_t length,
                                DirectHandle<SeqOneByteString> string_output) {
   int index = 0;
@@ -492,6 +493,7 @@ void AtomicUint8ArrayToHexSlow(const char* bytes, size_t length,
     index += 2;
   }
 }
+#endif
 
 inline uint16_t ByteToHex(uint8_t byte) {
   const uint16_t correction = (('a' - '0' - 10) << 8) + ('a' - '0' - 10);
@@ -645,11 +647,15 @@ Tagged<Object> Uint8ArrayToHex(const char* bytes, size_t length, bool is_shared,
   }
 #endif
 
+#ifdef WANT_ATOMIC_REF
   if (is_shared) {
     AtomicUint8ArrayToHexSlow(bytes, length, string_output);
   } else {
+#endif
     Uint8ArrayToHexSlow(bytes, length, string_output);
+#ifdef WANT_ATOMIC_REF
   }
+#endif
   return *string_output;
 }
 
@@ -1082,12 +1088,16 @@ bool ArrayBufferFromHex(const base::Vector<T>& input_vector, bool is_shared,
   for (uint32_t i = 0; i < output_length * 2; i += 2) {
     result = HandleRemainingHexValues(input_vector, i);
     if (result.has_value()) {
+#ifdef WANT_ATOMIC_REF
       if (is_shared) {
         std::atomic_ref<uint8_t>(buffer[index++])
             .store(result.value(), std::memory_order_relaxed);
       } else {
+#endif
         buffer[index++] = result.value();
+#ifdef WANT_ATOMIC_REF
       }
+#endif
     } else {
       return false;
     }
-- 
2.50.0.727.gbf7dc18ff4-goog

