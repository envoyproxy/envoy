admin:
  access_log_path: /tmp/admin_access.log
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 9901

static_resources:
  listeners:
  # Server listener that receives initial requests
  - name: server_listener
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 10000
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_http
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains: ["*"]
              routes:
              - match:
                  prefix: "/"
                route:
                  cluster: reverse_connection_cluster
          http_filters:
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

  # Client listener that maintains reverse connections
  - name: client_listener
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 10001
    listener_filters:
    - name: envoy.filters.listener.reverse_connection
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.filters.listener.reverse_connection.v3alpha.ReverseConnection
    reverse_connection_listener_config:
      "@type": type.googleapis.com/envoy.extensions.reverse_connection.reverse_connection_listener_config.v3alpha.ReverseConnectionListenerConfig
      src_node_id: "client_node"
      src_cluster_id: "client_cluster"
      src_tenant_id: "tenant1"
      remote_cluster_to_conn_count:
      - cluster_name: "reverse_connection_cluster"
        reverse_connection_count:
          value: 5
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: egress_http
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains: ["*"]
              routes:
              - match:
                  prefix: "/"
                direct_response:
                  status: 200
                  body:
                    inline_string: "Hello from reverse connection client!"
          http_filters:
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

  clusters:
  - name: reverse_connection_cluster
    connect_timeout: 30s
    lb_policy: CLUSTER_PROVIDED
    cluster_type:
      name: envoy.clusters.reverse_connection
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.clusters.reverse_connection.v3alpha.RevConClusterConfig
        http_header_names:
          - x-remote-node-id
          - x-dst-cluster-uuid
        cleanup_interval: 10s
    typed_extension_protocol_options:
      envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
        "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
        explicit_http_config:
          http2_protocol_options: {}

# Configure reverse connection behavior
bootstrap_extensions:
- name: envoy.bootstrap.reverse_connection
  typed_config:
    "@type": type.googleapis.com/envoy.extensions.bootstrap.reverse_connection.v3alpha.ReverseConnection
    stat_prefix: "reverse_connection"
