date: Pending

behavior_changes:
# *Changes that are expected to cause an incompatibility if applicable; deployment changes are likely required*

minor_behavior_changes:
# *Changes that may cause incompatibilities for some users, but should not for most*

bug_fixes:
# *Changes expected to improve the state of the world and are unlikely to have negative effects*

removed_config_or_runtime:
# *Normally occurs at the end of the* :ref:`deprecation period <deprecated>`
- area: router
  change: |
    Removed runtime guard ``envoy.reloadable_features.shadow_policy_inherit_trace_sampling`` and legacy code paths.
- area: dynamic_forward_proxy
  change: |
    Removed runtime guard ``envoy.reloadable_features.avoid_dfp_cluster_removal_on_cds_update`` and legacy code paths.
- area: oauth2
  change: |
    Removed runtime guard ``envoy.reloadable_features.oauth2_use_refresh_token`` and legacy code paths.
- area: http_connection_manager
  change: |
    Removed runtime guard ``envoy.reloadable_features.explicit_internal_address_config`` and legacy code paths.
- area: dfp
  change: |
    Removed runtime guard ``envoy.reloadable_features.dfp_fail_on_empty_host_header`` and legacy code paths.

new_features:
- area: health_check
  change: |
    Added support for request payloads in HTTP health checks. The ``send`` field in ``HttpHealthCheck`` can now be
    used to specify a request body to be sent during health checking. This feature supports both hex-encoded text
    and binary payloads, similar to TCP health checks. The payload can only be used with HTTP methods that support
    request bodies (POST, PUT, PATCH, OPTIONS). Methods that must not have request bodies (GET, HEAD, DELETE, TRACE)
    are validated and will throw an error if combined with payloads. The implementation is optimized to process the
    payload once during configuration and reuse it for all health check requests. See :ref:`HttpHealthCheck
    <envoy_v3_api_msg_config.core.v3.HealthCheck.HttpHealthCheck>` for configuration details.
- area: router_check_tool
  change: |
    Added support for testing routes with :ref:`dynamic metadata matchers <envoy_v3_api_field_config.route.v3.RouteMatch.dynamic_metadata>`
    in the router check tool. The tool now accepts a ``dynamic_metadata`` field in test input to set metadata
    that can be matched by route configuration. This allows comprehensive testing of routes that depend on
    dynamic metadata for routing decisions.
- area: lua
  change: |
    Added a new ``filterState()`` on ``streamInfo()`` which provides access to filter state objects stored during request processing.
    This allows Lua scripts to retrieve string, boolean, and numeric values stored by various filters for use in routing decisions,
    header modifications, and other processing logic. See :ref:`Filter State API <config_http_filters_lua_stream_info_filter_state_wrapper>`
    for more details.
- area: socket
  change: |
    Added ``network_namespace_filepath`` to ``SocketAddress``.
- area: ratelimit
  change: |
    Add the :ref:`rate_limits
    <envoy_v3_api_field_extensions.filters.http.ratelimit.v3.RateLimit.rate_limits>`
    field to generate rate limit descriptors. If this field is set, the
    :ref:`VirtualHost.rate_limits<envoy_v3_api_field_config.route.v3.VirtualHost.rate_limits>` or
    :ref:`RouteAction.rate_limits<envoy_v3_api_field_config.route.v3.RouteAction.rate_limits>` fields will be ignored. However,
    :ref:`RateLimitPerRoute.rate_limits<envoy_v3_api_field_extensions.filters.http.ratelimit.v3.RateLimitPerRoute.rate_limits>`
    will take precedence over this field.
- area: observability
  change: |
    Added ENVOY_NOTIFICATION macro to track specific conditions in produiction environments.
- area: dns_filter, redis_proxy and prefix_matcher_map
  change: |
    Switch to using Radix Tree instead of Trie for performance improvements.
- area: load_reporting
  change: |
    Added support for :ref:`ServerNameMatcher <envoy_v3_api_msg_.xds.type.matcher.v3.ServerNameMatcher>` trie-based matching.
- area: stateful_session
  change: |
    Added support for cookie attributes to stateful session cookie.
- area: http3
  change: |
    Added :ref:`disable_connection_flow_control_for_streams
    <envoy_v3_api_field_config.core.v3.Http3ProtocolOptions.disable_connection_flow_control_for_streams>`, an experimental
    option for disabling connection level flow control for streams. This is useful in situations where the streams share the same
    connection but originate from different end-clients, so that each stream can make progress independently at non-front-line proxies.
- area: dfp
  change: |
    Added :ref:`allow_dynamic_host_from_filter_state
    <envoy_v3_api_field_extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig.allow_dynamic_host_from_filter_state>`
    flag to HTTP Dynamic Forward Proxy filter. When enabled, the filter will check for ``envoy.upstream.dynamic_host`` and
    ``envoy.upstream.dynamic_port`` filter state values before using the HTTP Host header, providing consistency with SNI
    and UDP DFP filters. When disabled (default), maintains backward compatibility by using the HTTP Host header directly.
- area: alts
  change: |
    Added environment variable-protected gRPC keepalive params to the ALTS handshaker client.
- area: wasm
  change: |
    Added support for returning ``StopIteration`` from plugin ``onRequestHeader`` and ``onResponseHeader`` callbacks. See
    :ref:`allow_on_headers_stop_iteration <envoy_v3_api_field_extensions.wasm.v3.PluginConfig.allow_on_headers_stop_iteration>`
    for more details. By default, current behavior is maintained.
- area: aws
  change: |
    Added ``assume_role_credential_provider`` to add support for role chaining in AWS filters. This allows envoy to
    assume an additional role before SigV4 signing occurs.
- area: otlp_stat_sink
  change: |
    added support for resource attributes. The stat sink will use the resource attributes configured for the OpenTelemetry tracer via
    :ref:`resource_detectors <envoy_v3_api_field_config.trace.v3.OpenTelemetryConfig.resource_detectors>`.
    Added support for endpoint-level load stats and metrics reporting. Locality load reports now include per
    endpoint statistics and metrics, but only for endpoints with updated stats, optimizing report size and efficiency.

deprecated:
