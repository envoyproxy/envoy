date: Pending

behavior_changes:
# *Changes that are expected to cause an incompatibility if applicable; deployment changes are likely required*
- area: aws_iam
  change: |
    As announced in November 2024 (see https://github.com/envoyproxy/envoy/issues/37621), the
    grpc_credentials/aws_iam extension is being deleted. Any configuration referencing this extension
    will fail to load.

minor_behavior_changes:
# *Changes that may cause incompatibilities for some users, but should not for most*
- area: lua
  change: |
    The ``metadata()`` of lua filter now will search the metadata by the :ref:`filter config name
    <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpFilter.name>` first.
    And if not found, it will search by the canonical name of the filter ``envoy.filters.http.lua``.
- area: grpc-json
  change: |
    Make the :ref:`gRPC JSON transcoder filter's <config_http_filters_grpc_json_reverse_transcoder>` json print options configurable.
- area: oauth2
  change: |
    Reset CSRF token when token validation fails during redirection.
    If the CSRF token cookie is present during the redirection to the authorization server, it will be validated.
    Previously, if this validation failed, the oauth flow would fail. Now the CSRF token will simply be reset. This fixes
    the case where an hmac secret change causes a redirect flow, but the CSRF token cookie hasn't yet expired
    causing a CSRF token validation failure.
- area: cel
  change: |
    Precompile regexes in cel expressions. This can be disabled by setting the runtime guard
    ``envoy.reloadable_features.enable_cel_regex_precompilation`` to false.
- area: dns
  change: |
    Allow getaddrinfo to be configured to run by a thread pool, controlled by :ref:`num_resolver_threads
    <envoy_v3_api_field_extensions.network.dns_resolver.getaddrinfo.v3.GetAddrInfoDnsResolverConfig.num_resolver_threads>`.
- area: grpc-json-transcoding
  change: |
    Add SSE style message framing for streamed responses in :ref:`gRPC JSON transcoder filter <config_http_filters_grpc_json_transcoder>`.

bug_fixes:
# *Changes expected to improve the state of the world and are unlikely to have negative effects*
- area: conn_pool
  change: |
    Fixed an issue that could lead to too many connections when using
    :ref:`AutoHttpConfig <envoy_v3_api_msg_extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig>` if the
    established connection is ``http/2`` and Envoy predicted it would have lower concurrent capacity.
- area: conn_pool
  change: |
    Fixed an issue that could lead to insufficient connections for current pending requests. If a connection starts draining while it
    has negative unused capacity (which happens if an HTTP/2 ``SETTINGS`` frame reduces allowed concurrency to below the current number
    of requests), that connection's unused capacity will be included in total pool capacity even though it is unusable because it is
    draining. This can result in not enough connections being established for current pending requests. This is most problematic for
    long-lived requests (such as streaming gRPC requests or long-poll requests) because a connection could be in the draining state
    for a long time.
- area: hcm
  change: |
    Fixes a bug where the lifetime of the HttpConnectionManager's ActiveStream can be out of sync
    with the lifetime of the codec stream.

removed_config_or_runtime:
# *Normally occurs at the end of the* :ref:`deprecation period <deprecated>`
- area: websocket
  change: |
    Removed runtime guard ``envoy.reloadable_features.switch_protocol_websocket_handshake`` and legacy code paths.
- area: http2
  change: |
    Removed runtime guard ``envoy.reloadable_features.http2_no_protocol_error_upon_clean_close`` and legacy code paths.
- area: access_log
  change: |
    Removed runtime guard ``envoy.reloadable_features.sanitize_sni_in_access_log`` and legacy code paths.
- area: quic
  change: |
    Removed runtime guard ``envoy.reloadable_features.quic_connect_client_udp_sockets`` and legacy code paths.
- area: quic
  change: |
    Removed runtime guard ``envoy.reloadable_features.quic_support_certificate_compression`` and legacy code paths.
- area: http
  change: |
    Removed runtime guard ``envoy.reloadable_features.internal_authority_header_validator`` and legacy code paths.
- area: http
  change: |
    Removed runtime guard ``envoy_reloadable_features_filter_access_loggers_first`` and legacy code paths.
- area: tcp_proxy
  change: |
    Removed runtime guard ``envoy.reloadable_features.tcp_tunneling_send_downstream_fin_on_upstream_trailers`` and legacy code paths.
- area: runtime
  change: |
    Removed runtime guard ``envoy_reloadable_features_boolean_to_string_fix`` and legacy code paths.
- area: logging
  change: |
    Removed runtime guard ``envoy.reloadable_features.logging_with_fast_json_formatter`` and legacy code paths.
- area: sni
  change: |
    Removed runtime guard ``envoy.reloadable_features.use_route_host_mutation_for_auto_sni_san`` and legacy code paths.
- area: ext_proc
  change: |
    Removed runtime guard ``envoy.reloadable_features.ext_proc_timeout_error`` and legacy code paths.
- area: quic
  change: |
    Removed runtime guard ``envoy.reloadable_features.extend_h3_accept_untrusted`` and legacy code paths.
- area: lua
  change: |
    Removed runtime guard ``envoy.reloadable_features.lua_flow_control_while_http_call`` and legacy code paths.

new_features:
- area: stateful_session
  change: |
    Supports envelope stateful session extension to keep the exist session header value
    from upstream server. See :ref:`mode
    <envoy_v3_api_msg_extensions.http.stateful_session.envelope.v3.EnvelopeSessionState>`
    for more details.
- area: load_balancing
  change: |
    Added Override Host Load Balancing policy. See
    :ref:`load balancing policies overview <arch_overview_load_balancing_policies>` for more details.
- area: lua
  change: |
    Added support for accessing filter context.
    See :ref:`filterContext() <config_http_filters_lua_stream_handle_api_filter_context>` for more details.
- area: resource_monitors
  change: |
    added new cgroup memory resource monitor that reads memory usage/limit from cgroup v1/v2 subsystems and calculates
    memory pressure, with configurable max_memory_bytes limit
    :ref:`existing extension <envoy_v3_api_msg_extensions.resource_monitors.cgroup_memory.v3.CgroupMemoryConfig>`.
- area: ext_authz
  change: |
    Added ``grpc_status`` to ``ExtAuthzLoggingInfo`` in ext_authz http filter.
- area: http
  change: |
    Add :ref:`response trailers mutations
    <envoy_v3_api_field_extensions.filters.http.header_mutation.v3.Mutations.response_trailers_mutations>` and
    :ref:`quest trailers mutations
    <envoy_v3_api_field_extensions.filters.http.header_mutation.v3.Mutations.request_trailers_mutations>`
    to :ref:`Header Mutation Filter <envoy_v3_api_msg_extensions.filters.http.header_mutation.v3.HeaderMutation>`
    for adding/removing trailers from the request and the response.
- area: url_template
  change: |
    Included the asterisk ``*`` in the match pattern when using the * or ** operators in the URL template.
    This behavioral change can be temporarily reverted by setting runtime guard
    ``envoy.reloadable_features.uri_template_match_on_asterisk`` to ``false``.
- area: rbac filter
  change: |
    allow listed ``FilterStateInput`` to be used with the xDS matcher in the HTTP RBAC filter.
- area: rbac filter
  change: |
    allow listed ``FilterStateInput`` to be used with the xDS matcher in the Network RBAC filter.
- area: tls_inspector filter
  change: |
    added :ref:`enable_ja4_fingerprinting
    <envoy_v3_api_field_extensions.filters.listener.tls_inspector.v3.TlsInspector.enable_ja4_fingerprinting>` to create
    a JA4 fingerprint hash from the Client Hello message.

deprecated:
