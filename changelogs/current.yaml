date: Pending

behavior_changes:
# *Changes that are expected to cause an incompatibility if applicable; deployment changes are likely required*
- area: server
  change: |
    Added container-aware CPU detection on Linux that respects cgroup CPU limits in addition to hardware thread count
    and CPU affinity. This change only affects behavior when the ``--concurrency`` flag is not explicitly set.
    Envoy now uses the minimum of hardware threads, CPU affinity, and cgroup CPU limits
    to determine the number of worker threads by default. This provides better resource utilization in
    containerized environments (Docker, Kubernetes) where CPU limits are set via cgroups. The new behavior
    is enabled by default and can be disabled by setting the ``ENVOY_CGROUP_CPU_DETECTION`` environment
    variable to ``false``. When disabled, Envoy will fall back to the previous behavior of using only
    hardware thread count and CPU affinity for worker thread calculation. Uses conservative rounding (floor)
    to account for non-worker threads and prevent container throttling, which may reduce the total number of
    connections.

minor_behavior_changes:
# *Changes that may cause incompatibilities for some users, but should not for most*
- area: router
  change: |
    Added :ref:`host_rewrite
    <envoy_v3_api_field_config.route.v3.RouteAction.host_rewrite>` to
    :ref:`RouteAction <envoy_v3_api_msg_config.route.v3.RouteAction>` to support substitution
    formatting for host header rewriting.
    Added :ref:`path_rewrite
    <envoy_v3_api_field_config.route.v3.RouteAction.path_rewrite>` to
    :ref:`RouteAction <envoy_v3_api_msg_config.route.v3.RouteAction>` to support substitution
    formatting for path header rewriting.
- area: ext_proc
  change: |
    Use one of a hard-coded set of error messages when a :ref:`HeaderMutation
    <envoy_v3_api_msg_service.ext_proc.v3.HeaderMutation>` fails. Removing
    request-specific details allows grouping by similar failure types. Detailed
    messages remain available in debug logs.
- area: ext_authz
  change: |
    Check that the response header count is less than the configured limits before applying mutations, and do not
    add new headers if not.
- area: quic
  change: |
    Switch to use QUICHE provided migration logic to handle port migration upon path degrading and migration to Server
    Preferred Address. This behavior can be reverted by setting ``envoy.reloadable_features.use_migration_in_quiche``.
- area: mobile
  change: |
    Use mobile specific network observer registries to propagate network change signals. This behavior can be reverted by
    setting the runtime guard ``envoy.reloadable_features.mobile_use_network_observer_registry``.

bug_fixes:
# *Changes expected to improve the state of the world and are unlikely to have negative effects*
- area: http2
  change: |
    Fixed a bug where Envoy would leak memory if an HTTP/2 stream was reset before request headers were
    sent. For example, if an upstream HTTP filter sent a local reply after the connection was established but
    before request headers were sent, the memory allocated for the stream was not released.
- area: http2
  change: |
    Optimized HTTP/2 header processing by avoiding memory allocations and string copies for well-known header names.
    For common HTTP/2 headers (such as ``:method``, ``:path``, ``:status``, ``content-type``, ``user-agent``, etc.),
    Envoy now references static strings instead of copying header names. This reduces memory allocations and improves
    performance for typical HTTP/2 traffic.
- area: lua
  change: |
    Fixed a bug where Lua filters could cause Envoy to crash when setting the response body to a payload larger
    than the body buffer limit.
- area: bootstrap
  change: |
    Fixed an issue where the custom
    :ref:`header_prefix <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.header_prefix>`
    would result in a crash at startup.
- area: connection pool
  change: |
    Fixed a crash in the TCP connection pool that occurs during downstream connection teardown when large requests
    or responses trigger flow control.
- area: http
  change: |
    Fixed ``shouldDrainConnectionUponCompletion()`` to properly send ``GOAWAY`` frames for HTTP/2 and HTTP/3
    instead of aggressively closing connections. This prevents response body transmission interruption and
    ``ERR_DRAINING`` errors on the client side. HTTP/1.1 behavior remains unchanged.
- area: composite
  change: |
    Fixed per-route configuration for composite filter to support matching on response headers and trailers.
    Previously, per-route matchers would silently fail when attempting to match on ``HttpResponseHeaderMatchInput``
    or ``HttpResponseTrailerMatchInput``, causing the delegated filter to be skipped without error.
- area: dns
  change: |
    c-ares resolver: add optional ``reinit_channel_on_timeout`` to reinitialize
    the resolver after DNS timeouts.

removed_config_or_runtime:
# *Normally occurs at the end of the* :ref:`deprecation period <deprecated>`
- area: jwt_authn
  change: |
    Removed runtime guard ``envoy.reloadable_features.jwt_fetcher_use_scheme_from_uri`` and legacy code paths.
- area: tcp
  change: |
    Removed runtime guard ``envoy.reloadable_features.tcp_proxy_retry_on_different_event_loop`` and legacy code paths.
- area: http
  change: |
    Removed runtime guard ``envoy.reloadable_features.http1_balsa_allow_cr_or_lf_at_request_start`` and legacy code paths.
- area: quic
  change: |
    Removed runtime guard ``envoy.reloadable_features.http3_remove_empty_cookie`` and legacy code paths.
- area: http
  change: |
    Removed runtime guard ``envoy.reloadable_features.original_src_fix_port_exhaustion`` and legacy code paths.
- area: xds
  change: |
    Removed runtime guard ``envoy.reloadable_features.report_load_with_rq_issued`` and legacy code paths.

new_features:
- area: udp_sink
  change: |
    Enhanced the UDP sink to support tapped messages larger than 64 KB.
- area: otlp_stat_sink
  change: |
    Added support for dropping stats via
    :ref:`DropAction <envoy_v3_api_msg_extensions.stat_sinks.open_telemetry.v3.SinkConfig.DropAction>` during
    custom metric conversion.
- area: http
  change: |
    Added :ref:`vhost_header <envoy_v3_api_field_config.route.v3.RouteConfiguration.vhost_header>` to
    :ref:`RouteConfiguration <envoy_v3_api_msg_config.route.v3.RouteConfiguration>`, allowing use of a different
    header for vhost matching.
- area: logging
  change: |
    Added support for the not-equal operator in access log filter rules, in
    :ref:`ComparisonFilter <envoy_v3_api_msg_config.accesslog.v3.ComparisonFilter>`.
- area: cel
  change: |
    Added per-expression configuration options for CEL evaluator to control string conversion, concatenation,
    and string extension functions. CEL expressions in RBAC policies and access logger filters
    can now enable string functions such as ``replace()`` and ``split()`` through the new
    :ref:`cel_config <envoy_v3_api_field_config.rbac.v3.Policy.cel_config>` and
    :ref:`cel_config <envoy_v3_api_field_extensions.access_loggers.filters.cel.v3.ExpressionFilter.cel_config>` fields
    in their respective configurations. See :ref:`CelExpressionConfig <envoy_v3_api_msg_config.core.v3.CelExpressionConfig>`
    for details.
- area: formatter
  change: |
    Added support for the following new access log formatters:
    - ``%REQUEST_HEADER(X?Y):Z%`` as full name version of ``%REQ(X?Y):Z%``
    - ``%RESPONSE_HEADER(X?Y):Z%`` as full name version of ``%RESP(X?Y):Z%``
    - ``%RESPONSE_TRAILER(X?Y):Z%`` as full name version of ``%TRAILER(X?Y):Z%``
    This provides a more consistent naming scheme for users to understand and use.
- area: lua
  change: |
    Added ``drainConnectionUponCompletion()`` to the Lua filter stream info API. This allows Lua scripts
    to mark connections for draining, which adds a ``Connection: close`` header for HTTP/1.1 or sends a
    ``GOAWAY`` frame for HTTP/2 and HTTP/3.
- area: wasm
  change: |
    Added ``sign`` foreign function to create cryptographic signatures.
    See :ref:`Wasm foreign functions <arch_overview_wasm_foreign_functions>` for more details.
- area: redis
  change: |
    Added cluster-scoped command support with a flexible response handling framework.
- area: overload management
  change: |
    The fixed heap resource monitor can now calculate memory pressure as currently allocated memory divided by maximum heap size,
    giving more accurate and lower memory pressure values.
    This can avoid unnecessary load shedding or overload actions.
    To enable, set ``envoy.reloadable_features.fixed_heap_use_allocated`` to true.
    The default algorithm (heap_size - pageheap_unmapped - pageheap_free) does not discount for free memory in TCMalloc caches.
- area: admin
  change: |
    Added ``/memory/tcmalloc`` admin endpoint that provides TCMalloc memory statistics.
- area: dns_filter
  change: |
    Added :ref:`access_log <envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.access_log>` for DNS filter.
- area: quic
  change: |
    Added QUIC protocol option :ref:`max_sessions_per_event_loop
    <envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.max_sessions_per_event_loop>` to limit the maximum
    number of new QUIC sessions created per event loop. The default is 16, preserving the previous hardcoded limit.

deprecated:
