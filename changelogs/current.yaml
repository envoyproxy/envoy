date: October 14, 2025

behavior_changes:
- area: http_11_proxy
  change: |
    HTTP/1.1 proxy transport socket now generates RFC 9110 compliant ``CONNECT`` requests that include a ``Host`` header by default.
    When proxy address is configured via endpoint metadata, the transport socket now prefers hostname:port format over IP:port
    when hostname is available. The legacy behavior (``CONNECT`` without ``Host`` header) can be restored by setting the runtime flag
    ``envoy.reloadable_features.http_11_proxy_connect_legacy_format`` to ``true``.
- area: response_decoder
  change: |
    Updated ``EnvoyQuicClientStream`` and ``ResponseDecoderWrapper`` to use a handle to access the response decoder
    to prevent use-after-free errors by ensuring the decoder instance is still live before calling its methods.
    This change is guarded by the runtime flag ``envoy.reloadable_features.use_response_decoder_handle``.
- area: http
  change: |
    A route refresh will now result in a tracing refresh. The trace sampling decision and decoration
    of the new route will be applied to the active span.
    This change can be reverted by setting the runtime guard
    ``envoy.reloadable_features.trace_refresh_after_route_refresh`` to ``false``.
    Note, if :ref:`pack_trace_reason
    <envoy_v3_api_field_extensions.request_id.uuid.v3.UuidRequestIdConfig.pack_trace_reason>` is set
    to ``true`` (it is ``true`` by default), a request marked as traced cannot be unmarked as traced
    after the tracing refresh.
- area: http2
  change: |
    The default value for the :ref:`maximum number of concurrent streams in HTTP/2
    <envoy_v3_api_field_config.core.v3.Http2ProtocolOptions.max_concurrent_streams>`
    has been changed from 2147483647 to 1024.
    The default value for the :ref:`initial stream window size in HTTP/2
    <envoy_v3_api_field_config.core.v3.Http2ProtocolOptions.initial_stream_window_size>`
    has been changed from 256MiB to 16MiB.
    The default value for the :ref:`initial connection window size in HTTP/2
    <envoy_v3_api_field_config.core.v3.Http2ProtocolOptions.initial_connection_window_size>`
    has been changed from 256MiB to 24MiB.
    This change could be reverted temporarily by
    setting the runtime guard ``envoy.reloadable_features.safe_http2_options``
    to ``false``.
- area: ext_proc
  change: |
    Reverted `#39740 <https://github.com/envoyproxy/envoy/pull/39740>`_ to re-enable ``fail_open`` +
    ``FULL_DUPLEX_STREAMED`` configuration combination.
- area: load balancing
  change: |
    Moved locality WRR structures out of ``HostSetImpl`` and into a separate class. Locality WRR schedulers are now by default owned
    and constructed by the underlying Zone Aware LB, instead of owned and constructed by the Host Set. There should be no visible
    behavior change for existing users of Zone Aware LBs.

minor_behavior_changes:
# *Changes that may cause incompatibilities for some users, but should not for most*
- area: ext_proc
  change: |
    Use one of a hard-coded set of error messages when a :ref:`HeaderMutation
    <envoy_v3_api_msg_service.ext_proc.v3.HeaderMutation>` fails. Removing
    request-specific details allows grouping by similar failure types. Detailed
    messages remain available in debug logs.

bug_fixes:
- area: tcp_proxy
  change: |
    Fixed a bug where when a downstream TCP connection is created and the upstream connection is not fully established, no idle timeout
    is set on the downstream connection, which may lead to a connection leak if the client does not close the connection.
    The fix is to set an idle timeout on the downstream connection immediately after creation.
    This fix can be reverted by setting the runtime guard
    ``envoy.reloadable_features.tcp_proxy_set_idle_timer_immediately_on_new_connection`` to ``false``.
- area: udp_proxy
  change: |
    Fixed a crash in the UDP proxy that occurred during ``ENVOY_SIGTERM`` when active tunneling sessions were present.
- area: geoip
  change: |
    Fixed a bug in the MaxMind provider where the ``found_entry`` field in the lookup result was not checked before
    trying to populate headers with data. If this field is not checked the provider could try to populate headers
    with wrong data, as per the documentation for the MaxMind library
    `libmaxminddb.md <https://github.com/maxmind/libmaxminddb/blob/main/doc/libmaxminddb.md#mmdb_lookup_result_s>`_.
- area: http3
  change: |
    Fixed a bug where the access log was skipped for HTTP/3 requests when the stream was half closed. This behavior can be
    reverted by setting the runtime guard
    ``envoy.reloadable_features.quic_fix_defer_logging_miss_for_half_closed_stream`` to ``false``.
- area: load_balancing
  change: |
    Fixed a bug in ``ClientSideWeightedRoundRobinLoadBalancer`` with worker lbs iterating over priorities
    included in owning thread aware lb priority set that might have different number of priorities.
- area: http
  change: |
    Fixed a bug where premature resets of streams could result in recursive draining and a potential
    stack overflow. Setting a proper ``max_concurrent_streams`` value for HTTP/2 or HTTP/3 could eliminate
    the risk of a stack overflow before this fix.
- area: listener
  change: |
    Fixed a bug where comparing listeners did not consider the network namespace they were listening in.
- area: http
  change: |
    Fixed a bug where the ``response_headers_to_add`` may be processed multiple times for the local responses from
    the router filter.
- area: formatter
  change: |
    Fixed a bug where the ``%TRACE_ID%`` command cannot work properly at the header mutations.
- area: listeners
  change: |
    Fixed an issue where :ref:`TLS inspector listener filter <config_listener_filters_tls_inspector>` timed out
    when used with other listener filters. The bug was triggered when a previous listener filter processed more data
    than the TLS inspector had requested, causing the TLS inspector to incorrectly calculate its buffer growth strategy.
    The fix ensures that buffer growth is now based on actual bytes available rather than the previously requested amount.
- area: listener
  change: |
    Fixed a bug where a failure to create listener sockets in different Linux network namespaces was
    not handled properly. The success of the netns switch was not checked before attempting to
    access the result of the socket creation. This is only relevant for Linux and if a listening
    socket address was specified with a non-default network namespace.
- area: aws
  change: |
    Added missing session name, session duration, and ``external_id`` parameters in ``AssumeRole`` credentials provider.
- area: oauth2
  change: |
    Fixed a bug introduced in PR `#40228 <https://github.com/envoyproxy/envoy/pull/40228>`_, where OAuth2 cookies were
    removed for requests matching the ``pass_through_matcher`` configuration. This broke setups with multiple OAuth2
    filter instances using different ``pass_through_matcher`` configurations, because the first matching instance removed
    the OAuth2 cookies - even when a passthrough was intended - impacting subsequent filters that still needed those cookies.
- area: tls_inspector
  change: |
    Fixed regression in tls_inspector that caused plain text connections to be closed if more than 16Kb is read at once.
    This behavior can be reverted by setting the runtime guard ``envoy.reloadable_features.tls_inspector_no_length_check_on_error``
    to ``false``.
- area: stats
  change: |
    Fixed a bug where the metric name ``expiration_unix_time_seconds`` of
    ``cluster.<cluster_name>.ssl.certificate.<cert_name>.<metric_name>``
    and ``listener.<address>.ssl.certificate.<cert_name>.<metric_name>``
    was not being properly extracted in the final Prometheus stat name.
- area: odcds
  change: |
    Fixed a bug where using OD-CDS without ``cds_config`` would not work in some
    cases. This change introduces a new internal OD-CDS component. This change
    could be reverted temporarily by setting the runtime guard
    ``envoy.reloadable_features.odcds_over_ads_fix`` to ``false``.
- area: oauth2
  change: |
    Fixed an issue where cookies prefixed with ``__Secure-`` or ``__Host-`` were not receiving a
    ``Secure`` attribute.
- area: dns
  change: |
    Fixed a use-after-free (UAF) in DNS cache that can occur when the ``Host`` header is modified between the Dynamic
    Forwarding Proxy and Router filters.
- area: release
  change: |
    Fixed the distroless image to ensure nonroot.

removed_config_or_runtime:
- area: router
  change: |
    Removed runtime guard ``envoy.reloadable_features.shadow_policy_inherit_trace_sampling`` and legacy code paths.
- area: dns
  change: |
    Removed runtime guard ``envoy.reloadable_features.prefer_ipv6_dns_on_macos`` and legacy code paths.
- area: dynamic_forward_proxy
  change: |
    Removed runtime guard ``envoy.reloadable_features.avoid_dfp_cluster_removal_on_cds_update`` and legacy code paths.
- area: oauth2
  change: |
    Removed runtime guard ``envoy.reloadable_features.oauth2_use_refresh_token`` and legacy code paths.
- area: http_connection_manager
  change: |
    Removed runtime guard ``envoy.reloadable_features.explicit_internal_address_config`` and legacy code paths.
- area: dfp
  change: |
    Removed runtime guard ``envoy.reloadable_features.dfp_fail_on_empty_host_header`` and legacy code paths.
- area: quic
  change: |
    Removed runtime guard ``envoy.reloadable_features.prefer_quic_client_udp_gro`` and legacy code paths.
- area: udp_proxy
  change: |
    Removed runtime guard ``envoy.reloadable_features.enable_udp_proxy_outlier_detection`` and legacy code paths.
- area: xds
  change: |
    Removed runtime guard ``envoy.reloadable_features.xds_prevent_resource_copy`` and legacy code paths.
- area: rds
  change: |
    Removed runtime guard ``envoy.reloadable_features.normalize_rds_provider_config`` and legacy code paths.
- area: http
  change: |
    Removed runtime guard ``envoy.reloadable_features.local_reply_traverses_filter_chain_after_1xx`` and legacy code paths.
- area: quic
  change: |
    Removed runtime guard ``envoy.reloadable_features.report_stream_reset_error_code`` and legacy code paths.
- area: router
  change: |
    Removed runtime guard ``envoy.reloadable_features.streaming_shadow`` and legacy code paths.
- area: http3
  change: |
    Removed runtime guard ``envoy.reloadable_features.http3_remove_empty_trailers`` and legacy code paths.
- area: stats
  change: |
    Removed runtime guard ``envoy.reloadable_features.enable_include_histograms`` and legacy code paths.
- area: network
  change: |
    Removed runtime guard ``envoy.reloadable_features.udp_socket_apply_aggregated_read_limit`` and legacy code paths.
- area: http
  change: |
    Removed runtime guard ``envoy.reloadable_features.proxy_status_mapping_more_core_response_flags`` and legacy code paths.
- area: http
  change: |
    Removed runtime guard ``envoy.reloadable_features.allow_alt_svc_for_ips`` and legacy code paths.
- area: http
  change: |
    Removed runtime guard ``envoy.reloadable_features.filter_chain_aborted_can_not_continue`` and legacy code paths.
- area: http
  change: |
    Removed runtime guard ``envoy.reloadable_features.use_filter_manager_state_for_downstream_end_stream`` and legacy code paths.
- area: balsa
  change: |
    Removed runtime guard ``envoy.reloadable_features.wait_for_first_byte_before_balsa_msg_done`` and legacy code paths.
- area: geoip_providers
  change: |
    Removed runtime guard ``envoy.reloadable_features.mmdb_files_reload_enabled`` and legacy code paths.
- area: proxy_protocol
  change: |
    Removed runtime guard ``envoy.reloadable_features.use_typed_metadata_in_proxy_protocol_listener`` and legacy code paths.
- area: dns_resolver
  change: |
    Removed runtime guard ``envoy.reloadable_features.getaddrinfo_num_retries`` and legacy code paths.
- area: proxy_filter
  change: |
    Removed runtime guard ``envoy.reloadable_features.proxy_ssl_port`` and legacy code paths.
- area: gcp_authn
  change: |
    Removed runtime guard ``envoy.reloadable_features.gcp_authn_use_fixed_url`` and legacy code paths.
- area: jwt_authn
  change: |
    Removed runtime guard ``envoy.reloadable_features.jwt_authn_remove_jwt_from_query_params`` and legacy code paths.
- area: jwt_authn
  change: |
    Removed runtime guard ``envoy.reloadable_features.jwt_authn_validate_uri`` and legacy code paths.
- area: dispatcher
  change: |
    Removed runtime guard ``envoy.restart_features.fix_dispatcher_approximate_now`` and legacy code paths.
- area: upstream
  change: |
    Removed runtime guard ``envoy.reloadable_features.use_config_in_happy_eyeballs`` and legacy code paths.
- area: http
  change: |
    Removed runtime guard ``envoy.reloadable_features.proxy_104`` and legacy code paths.

new_features:
- area: quic
  change: |
    Add a new quic configuration field, 'max_sessions_per_event_loop', to QuicProtocolOptions in Envoy listener.
    This allows tuning the maximum number of new QUIC sessions created within a single event loop.
    The default value is 16, preserving the previous hardcoded limit.
deprecated:
