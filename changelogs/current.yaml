date: Pending

behavior_changes:
# *Changes that are expected to cause an incompatibility if applicable; deployment changes are likely required*

minor_behavior_changes:
# *Changes that may cause incompatibilities for some users, but should not for most*

bug_fixes:
# *Changes expected to improve the state of the world and are unlikely to have negative effects*

removed_config_or_runtime:
# *Normally occurs at the end of the* :ref:`deprecation period <deprecated>`

new_features:
- area: redis
  change: |
    Added support for keys and select.
- area: wasm
  change: |
    Added the Wasm VM reload support to reload Wasm VM when the Wasm VM is failed with runtime errors. See
    :ref:`failure_policy <envoy_v3_api_field_extensions.wasm.v3.PluginConfig.failure_policy>` for more details.
    The ``FAIL_RELOAD`` reload policy will be used by default.
- area: wasm
  change: |
    Added support for Wasm plugins written in Go with the ``github.com/proxy-wasm/proxy-wasm-go-sdk`` and compiled with Go v1.24+.
- area: aws_request_signing
  change: |
    Added an optional field :ref:`credential_provider
    <envoy_v3_api_field_extensions.filters.http.aws_request_signing.v3.AwsRequestSigning.credential_provider>`
    to the AWS request signing filter to explicitly specify a source for AWS credentials. Credential file and ``AssumeRoleWithWebIdentity``
    behaviour can also be overridden with this field.
- area: tls
  change: |
    Added support for **P-384** and **P-521** curves for TLS server certificates.
- area: tls
  change: |
    Added an :ref:`option
    <envoy_v3_api_field_extensions.transport_sockets.tls.v3.UpstreamTlsContext.auto_host_sni>` to change the upstream
    SNI to the configured hostname for the upstream.
- area: tls
  change: |
    Added an :ref:`option
    <envoy_v3_api_field_extensions.transport_sockets.tls.v3.UpstreamTlsContext.auto_sni_san_validation>` to validate
    the upstream server certificate SANs against the actual SNI value sent, regardless of the method of configuring SNI.
- area: xds
  change: |
    Added support for ADS replacement by invoking ``xdsManager().setAdsConfigSource()`` with a new config source.
- area: wasm
  change: |
    Added ``clear_route_cache`` foreign function to clear the route cache.
- area: access_log
  change: |
    Added ``%DOWNSTREAM_LOCAL_EMAIL_SAN%``, ``%DOWNSTREAM_PEER_EMAIL_SAN%``, ``%DOWNSTREAM_LOCAL_OTHERNAME_SAN%`` and
    ``%DOWNSTREAM_PEER_OTHERNAME_SAN%`` substitution formatters.
- area: access_log
  change: |
    Added support for logging upstream connection establishment duration in the
    :ref:`%COMMON_DURATION% <config_access_log_format_common_duration>` access log
    formatter operator. The following time points were added: ``%US_CX_BEG%``,
    ``%US_CX_END%``, ``%US_HS_END%``.
- area: lua
  change: |
    Add logging functions to all lua objects. Previously these were only available on the Lua http filter request handle.
- area: access log
  change: |
    Added fields for :ref:`DOWNSTREAM_DIRECT_LOCAL_ADDRESS <config_access_log_format>` and
    :ref:`DOWNSTREAM_DIRECT_LOCAL_ADDRESS_WITHOUT_PORT <config_access_log_format>`.
- area: quic
  change: |
    Added :ref:`QUIC stats debug visitor <envoy_v3_api_msg_extensions.quic.connection_debug_visitor.quic_stats.v3.Config>` to
    get more stats from the QUIC transport.
- area: http_inspector
  change: |
    Added default-false ``envoy.reloadable_features.http_inspector_use_balsa_parser`` for ``HttpInspector`` to use ``BalsaParser``.
- area: overload
  change: |
    Added support for scaling :ref:`max connection duration
    <envoy_v3_api_enum_value_config.overload.v3.ScaleTimersOverloadActionConfig.TimerType.HTTP_DOWNSTREAM_CONNECTION_MAX>`.
    This can be used to reduce the max connection duration in response to overload.
- area: tracers
  change: |
    Set resource ``telemetry.sdk.*`` and scope ``otel.scope.name|version`` attributes for the OpenTelemetry tracer.
- area: lua
  change: |
    Added SSL :ref:`parsedSubjectPeerCertificate() <config_http_filters_lua_parsed_name>` API.
- area: lua cluster specifier
  change: |
    Added ability for a Lua script to query clusters for current requests and connections.
- area: lua
  change: |
    Added :ref:`downstreamDirectLocalAddress() <config_http_filters_lua_stream_info_downstream_direct_local_address>`
    method to the Stream info object API.
- area: udp_proxy
  change: |
    Added support for dynamic cluster selection in UDP proxy. The cluster can be set by one of the session filters
    by setting a per-session state object under the key ``envoy.udp_proxy.cluster``.
- area: filters
  change: |
    Added :ref:`the Api Key Auth filter <envoy_v3_api_msg_extensions.filters.http.api_key_auth.v3.ApiKeyAuth>`, which
    can be used to authenticate requests using an API key.
- area: CEL-attributes
  change: |
    Added :ref:`attribute <arch_overview_attributes>` ``upstream.request_attempt_count``
    to get the number of times a request is attempted upstream.
- area: ip-tagging
  change: |
    Adds support for specifying an alternate header
    :ref:`ip_tag_header <envoy_v3_api_field_extensions.filters.http.ip_tagging.v3.IPTagging.ip_tag_header>`
    for appending IP tags via ip-tagging filter instead of using the default header ``x-envoy-ip-tags``.
- area: c-ares
  change: |
    Added two new options to c-ares resolver for configuring custom timeouts and tries while resolving DNS
    queries. Custom timeouts could be configured by specifying :ref:`query_timeout_seconds
    <envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.query_timeout_seconds>` and
    custom tries could be configured by specifying :ref:`query_tries
    <envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.query_tries>`.
- area: rbac
  change: |
    Added :ref:`sourced_metadata <envoy_v3_api_field_config.rbac.v3.Permission.sourced_metadata>` which allows
    specifying an optional source for the metadata to be matched in addition to the metadata matcher.
- area: c-ares
  change: |
    Added nameserver rotation option to c-ares resolver. When enabled via :ref:`rotate_nameservers
    <envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.rotate_nameservers>`, this
    performs round-robin selection of the configured nameservers for each resolution to help distribute query load.
- area: access_log
  change: |
    Added support for :ref:`%UPSTREAM_HOST_NAME_WITHOUT_PORT% <config_access_log_format_upstream_host_name_without_port>`
    for the upstream host identifier without the port value.
- area: udp_proxy
  change: |
    Added support for coexistence of dynamic and static clusters in the same udp proxy, so we can use dynamic clusters
    for some sessions by setting a per-session state object under the key ``envoy.upstream.dynamic_host`` and routing
    to dynamic cluster, and we can use static clusters for other sessions by setting a per-session state object under
    the key ``envoy.udp_proxy.cluster`` without setting ``envoy.upstream.dynamic_host``.
- area: ext_proc
  change: |
    Added HTTP support in ext_proc filter to perform external processing with HTTP messages.
- area: ext_authz
  change: |
    Added filter state field ``latency_us``, ``bytesSent`` and ``bytesReceived`` access for CEL and logging.
- area: sni_dynamic_forward_proxy
  change: |
    Added support in SNI dynamic forward proxy for saving the resolved upstream address in the filter state.
    The state is saved with the key ``envoy.stream.upstream_address``.
- area: lua
  change: |
    Added a new ``setUpstreamOverrideHost()`` which could be used to set the given host as the upstream host for the
    current request.
- area: CEL-attributes
  change: |
    Added :ref:`attribute <arch_overview_attributes>` ``upstream.cx_pool_ready_duration``
    to get the duration from when the upstream request was created to when the upstream connection pool is ready.
- area: health_check
  change: |
    Added new health check filter stats including total requests, successful/failed checks, cached responses, and
    cluster health status counters. These stats help track health check behavior and cluster health state.
- area: http
  change: |
    Add :ref:`query parameter mutations
    <envoy_v3_api_field_extensions.filters.http.header_mutation.v3.Mutations.query_parameter_mutations>`
    to :ref:`Header Mutation Filter <envoy_v3_api_msg_extensions.filters.http.header_mutation.v3.HeaderMutation>`
    for adding/removing query parameters on a request.
- area: local_ratelimit
  change: |
    Added per descriptor custom hits addend support for local rate limit filter. See :ref:`hits_addend
    <envoy_v3_api_field_config.route.v3.RateLimit.hits_addend>` for more details.
- area: filters
  change: |
    Updated the ``set_filter_state`` :ref:`filter <config_http_filters_set_filter_state>` to support per-route overrides.
- area: grpc-json
  change: |
    Added a new http filter for :ref:`gRPC to JSON transcoding <config_http_filters_grpc_json_reverse_transcoder>`.
- area: matchers
  change: |
    Added new filter state matcher ip_range to
    :ref:`FilterStateMatcher <envoy_v3_api_msg_type.matcher.v3.FilterStateMatcher>` which attempts to
    cast the filter state object to an IP and match it against a list of CidrRanges. To support
    this, also added an :ref:`AddressMatcher <envoy_v3_api_msg_type.matcher.v3.AddressMatcher>`.
- area: attributes
  change: |
    Added new ``xds.virtual_host_name`` and ``xds.virtual_host_metadata`` attributes support. See
    :ref:`attributes <arch_overview_attributes>` for looking up xDS configuration information.
- area: redis
  change: |
    Added support for ``UNWATCH`` command.
- area: ratelimit
  change: |
    Add the :ref:`rate_limits
    <envoy_v3_api_field_extensions.filters.http.ratelimit.v3.RateLimitPerRoute.rate_limits>`
    field to generate rate limit descriptors. If this field is set, the
    :ref:`VirtualHost.rate_limits <envoy_v3_api_field_config.route.v3.VirtualHost.rate_limits>` or
    :ref:`RouteAction.rate_limits <envoy_v3_api_field_config.route.v3.RouteAction.rate_limits>` fields
    will be ignored.
- area: ratelimit
  change: |
    Add the option to reduce the rate limit budget based on request/response contexts on stream done.
    See :ref:`apply_on_stream_done <envoy_v3_api_field_config.route.v3.RateLimit.apply_on_stream_done>` for more details.
- area: resource_monitors
  change: |
    Added support to monitor Container CPU utilization in Linux K8s environment using existing
    extension <envoy_v3_api_msg_extensions.resource_monitors.cpu_utilization.v3.CpuUtilizationConfig>.
- area: udp_proxy
  change: |
    Added support for :ref:`backoff_options
    <envoy_v3_api_field_extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.UdpTunnelingConfig.RetryOptions.backoff_options>`
    to configure the backoff strategy for UDP proxy retries when tunneling over HTTP.
- area: lua
  change: |
    Added :ref:`routeName() <config_http_filters_lua_stream_info_route_name>` API to the Stream Info Object to get the
    name of the route matched by the filter chain.
- area: ratelimit
  change: |
    added support for query parameter rate limiting via the :ref:`query_parameters
    <envoy_v3_api_field_config.route.v3.RateLimit.Action.query_parameters>` action across HTTP and Thrift. This allows
    rate limiting based on specific query parameter values, with option to control the behavior when the query parameter
    is absent.
- area: access log
  change: |
    Added new command-line flag :option:`--skip-deprecated-logs`.
deprecated:
