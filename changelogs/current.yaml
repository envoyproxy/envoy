date: Pending

behavior_changes:
- area: ext_proc
  change: |
    Reverted https://github.com/envoyproxy/envoy/pull/39740 to re-enable fail_open+FULL_DUPLEX_STREAMED configuraton combination.

minor_behavior_changes:
# *Changes that may cause incompatibilities for some users, but should not for most*
- area: testing
  change: |
    In test code for external extensions, matchers ``Http::HeaderValueOf``, ``HasHeader`` and ``HeaderHasValueRef``
    must be replaced with ``ContainsHeader``.
    Any uses of matcher ``HeaderHasValue(...)`` should be replaced with ``::testing::Pointee(ContainsHeader(...))``.

bug_fixes:
# *Changes expected to improve the state of the world and are unlikely to have negative effects*
- area: http3
  change: |
    Fixed a bug where access log gets skipped for HTTP/3 requests when the stream is half closed. This behavior can be
    reverted by setting the runtime guard
    ``envoy.reloadable_features.quic_fix_defer_logging_miss_for_half_closed_stream`` to ``false``.

removed_config_or_runtime:
# *Normally occurs at the end of the* :ref:`deprecation period <deprecated>`
- area: router
  change: |
    Removed runtime guard ``envoy.reloadable_features.shadow_policy_inherit_trace_sampling`` and legacy code paths.
- area: dns
  change: |
    Removed runtime guard ``envoy.reloadable_features.prefer_ipv6_dns_on_macos`` and legacy code paths.
- area: dynamic_forward_proxy
  change: |
    Removed runtime guard ``envoy.reloadable_features.avoid_dfp_cluster_removal_on_cds_update`` and legacy code paths.
- area: oauth2
  change: |
    Removed runtime guard ``envoy.reloadable_features.oauth2_use_refresh_token`` and legacy code paths.
- area: http_connection_manager
  change: |
    Removed runtime guard ``envoy.reloadable_features.explicit_internal_address_config`` and legacy code paths.
- area: dfp
  change: |
    Removed runtime guard ``envoy.reloadable_features.dfp_fail_on_empty_host_header`` and legacy code paths.
- area: quic
  change: |
    Removed runtime guard ``envoy.reloadable_features.prefer_quic_client_udp_gro`` and legacy code paths.
- area: udp_proxy
  change: |
    Removed runtime guard ``envoy.reloadable_features.enable_udp_proxy_outlier_detection`` and legacy code paths.
- area: http3
  change: |
    Removed runtime guard ``envoy.reloadable_features.http3_remove_empty_trailers`` and legacy code paths.
- area: network
  change: |
    Removed runtime guard ``envoy.reloadable_features.udp_socket_apply_aggregated_read_limit`` and legacy code paths.
- area: http
  change: |
    Removed runtime guard ``envoy.reloadable_features.allow_alt_svc_for_ips`` and legacy code paths.
- area: http
  change: |
    Removed runtime guard ``envoy.reloadable_features.filter_chain_aborted_can_not_continue`` and legacy code paths.
- area: dns_resolver
  change: |
    Removed runtime guard ``envoy.reloadable_features.getaddrinfo_num_retries`` and legacy code paths.
- area: proxy_filter
  change: |
    Removed runtime guard ``envoy.reloadable_features.proxy_ssl_port`` and legacy code paths.
- area: gcp_authn
  change: |
    Removed runtime guard ``envoy.reloadable_features.gcp_authn_use_fixed_url`` and legacy code paths.
- area: jwt_authn
  change: |
    Removed runtime guard ``envoy.reloadable_features.jwt_authn_remove_jwt_from_query_params`` and legacy code paths.
- area: jwt_authn
  change: |
    Removed runtime guard ``envoy.reloadable_features.jwt_authn_validate_uri`` and legacy code paths.
- area: dispatcher
  change: |
    Removed runtime guard ``envoy.restart_features.fix_dispatcher_approximate_now`` and legacy code paths.
- area: upstream
  change: |
    Removed runtime guard ``envoy.reloadable_features.use_config_in_happy_eyeballs`` and legacy code paths.
- area: http
  change: |
    Removed runtime guard ``envoy.reloadable_features.proxy_104`` and legacy code paths.

new_features:
- area: quic
  change: |
    Added new option to support :ref:`base64 encoded server ID
    <envoy_v3_api_field_extensions.quic.connection_id_generator.quic_lb.v3.Config.server_id_base64_encoded>`
    in QUIC-LB.
- area: health_check
  change: |
    Added support for request payloads in HTTP health checks. The ``send`` field in ``HttpHealthCheck`` can now be
    used to specify a request body to be sent during health checking. This feature supports both hex-encoded text
    and binary payloads, similar to TCP health checks. The payload can only be used with HTTP methods that support
    request bodies (``POST``, ``PUT``, ``PATCH``, ``OPTIONS``). Methods that must not have request bodies
    (``GET``, ``HEAD``, ``DELETE``, ``TRACE``) are validated and will throw an error if combined with payloads.
    The implementation is optimized to process the payload once during configuration and reuse it for all health
    check requests. See :ref:`HttpHealthCheck <envoy_v3_api_msg_config.core.v3.HealthCheck.HttpHealthCheck>` for configuration details.
- area: router_check_tool
  change: |
    Added support for testing routes with :ref:`dynamic metadata matchers <envoy_v3_api_field_config.route.v3.RouteMatch.dynamic_metadata>`
    in the router check tool. The tool now accepts a ``dynamic_metadata`` field in test input to set metadata
    that can be matched by route configuration. This allows comprehensive testing of routes that depend on
    dynamic metadata for routing decisions.
- area: lua
  change: |
    Added a new ``filterState()`` on ``streamInfo()`` which provides access to filter state objects stored during request processing.
    This allows Lua scripts to retrieve string, boolean, and numeric values stored by various filters for use in routing decisions,
    header modifications, and other processing logic. See :ref:`Filter State API <config_http_filters_lua_stream_info_filter_state_wrapper>`
    for more details.
- area: socket
  change: |
    Added :ref:``network_namespace_filepath <envoy_v3_api_msg_config.core.v3.SocketAddress.network_namespace_filepath>`` to
    :ref:`SocketAddress <envoy_v3_api_msg_config.core.v3.SocketAddress>`. This field allows specifying a Linux network namespace filepath
    for socket creation, enabling network isolation in containerized environments.
- area: ratelimit
  change: |
    Add the :ref:`rate_limits
    <envoy_v3_api_field_extensions.filters.http.ratelimit.v3.RateLimit.rate_limits>`
    field to generate rate limit descriptors. If this field is set, the
    :ref:`VirtualHost.rate_limits<envoy_v3_api_field_config.route.v3.VirtualHost.rate_limits>` or
    :ref:`RouteAction.rate_limits<envoy_v3_api_field_config.route.v3.RouteAction.rate_limits>` fields will be ignored. However,
    :ref:`RateLimitPerRoute.rate_limits<envoy_v3_api_field_extensions.filters.http.ratelimit.v3.RateLimitPerRoute.rate_limits>`
    will take precedence over this field.
- area: redis
  change: |
    Added support for ``GEOSEARCH``.
- area: observability
  change: |
    Added ``ENVOY_NOTIFICATION`` macro to track specific conditions in produiction environments.
- area: dns_filter, redis_proxy and prefix_matcher_map
  change: |
    Switch to using Radix Tree instead of Trie for performance improvements.
- area: load_reporting
  change: |
    Added support for endpoint-level load stats and metrics reporting. Locality load reports now include per
    endpoint statistics and metrics, but only for endpoints with updated stats, optimizing report size and efficiency.
- area: overload management
  change: |
        Added load shed point ``envoy.load_shed_points.http2_server_go_away_and_close_on_dispatch``
        that sends ``GOAWAY`` AND closes connections for HTTP2 server processing of requests.  When
        a ``GOAWAY`` frame is submitted by this the counter ``http2.goaway_sent`` will be
        incremented.

- area: otlp_stat_sink
  change: |
    Added support for resource attributes. The stat sink will use the resource attributes configured for the OpenTelemetry tracer via
    :ref:`resource_detectors <envoy_v3_api_field_config.trace.v3.OpenTelemetryConfig.resource_detectors>`.
- area: lua
  change: |
    Added ``virtualHost()`` to the Stream handle API, allowing Lua scripts to retrieve virtual host information. So far, the only method
    implemented is ``metadata()``, allowing Lua scripts to access virtual host metadata scoped to the specific filter name. See
    :ref:`Virtual host object API <config_http_filters_lua_virtual_host_wrapper>` for more details.
- area: rbac
  change: |
    Switch the IP matcher to use LC-Trie for performance improvements.

deprecated:
