#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class TheWorks(object):
    """
    Attributes:
     - field_1
     - field_2
     - field_3
     - field_4
     - field_5
     - field_6
     - field_7
     - field_8
     - field_9
     - field_10
     - field_11
     - field_12
    """


    def __init__(self, field_1=None, field_2=None, field_3=None, field_4=None, field_5=None, field_6=None, field_7=None, field_8=None, field_9=None, field_10=None, field_11=None, field_12=None,):
        self.field_1 = field_1
        self.field_2 = field_2
        self.field_3 = field_3
        self.field_4 = field_4
        self.field_5 = field_5
        self.field_6 = field_6
        self.field_7 = field_7
        self.field_8 = field_8
        self.field_9 = field_9
        self.field_10 = field_10
        self.field_11 = field_11
        self.field_12 = field_12

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.field_1 = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.field_2 = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.field_3 = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.field_4 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.field_5 = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.field_6 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.field_7 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.field_8 = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.MAP:
                    self.field_9 = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readI32()
                        _val6 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.field_9[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.field_10 = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readI32()
                        self.field_10.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.SET:
                    self.field_11 = set()
                    (_etype16, _size13) = iprot.readSetBegin()
                    for _i17 in range(_size13):
                        _elem18 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.field_11.add(_elem18)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BOOL:
                    self.field_12 = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TheWorks')
        if self.field_1 is not None:
            oprot.writeFieldBegin('field_1', TType.BOOL, 1)
            oprot.writeBool(self.field_1)
            oprot.writeFieldEnd()
        if self.field_2 is not None:
            oprot.writeFieldBegin('field_2', TType.BYTE, 2)
            oprot.writeByte(self.field_2)
            oprot.writeFieldEnd()
        if self.field_3 is not None:
            oprot.writeFieldBegin('field_3', TType.I16, 3)
            oprot.writeI16(self.field_3)
            oprot.writeFieldEnd()
        if self.field_4 is not None:
            oprot.writeFieldBegin('field_4', TType.I32, 4)
            oprot.writeI32(self.field_4)
            oprot.writeFieldEnd()
        if self.field_5 is not None:
            oprot.writeFieldBegin('field_5', TType.I64, 5)
            oprot.writeI64(self.field_5)
            oprot.writeFieldEnd()
        if self.field_6 is not None:
            oprot.writeFieldBegin('field_6', TType.DOUBLE, 6)
            oprot.writeDouble(self.field_6)
            oprot.writeFieldEnd()
        if self.field_7 is not None:
            oprot.writeFieldBegin('field_7', TType.STRING, 7)
            oprot.writeString(self.field_7.encode('utf-8') if sys.version_info[0] == 2 else self.field_7)
            oprot.writeFieldEnd()
        if self.field_8 is not None:
            oprot.writeFieldBegin('field_8', TType.STRING, 8)
            oprot.writeBinary(self.field_8)
            oprot.writeFieldEnd()
        if self.field_9 is not None:
            oprot.writeFieldBegin('field_9', TType.MAP, 9)
            oprot.writeMapBegin(TType.I32, TType.STRING, len(self.field_9))
            for kiter19, viter20 in self.field_9.items():
                oprot.writeI32(kiter19)
                oprot.writeString(viter20.encode('utf-8') if sys.version_info[0] == 2 else viter20)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.field_10 is not None:
            oprot.writeFieldBegin('field_10', TType.LIST, 10)
            oprot.writeListBegin(TType.I32, len(self.field_10))
            for iter21 in self.field_10:
                oprot.writeI32(iter21)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.field_11 is not None:
            oprot.writeFieldBegin('field_11', TType.SET, 11)
            oprot.writeSetBegin(TType.STRING, len(self.field_11))
            for iter22 in self.field_11:
                oprot.writeString(iter22.encode('utf-8') if sys.version_info[0] == 2 else iter22)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.field_12 is not None:
            oprot.writeFieldBegin('field_12', TType.BOOL, 12)
            oprot.writeBool(self.field_12)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Param(object):
    """
    Attributes:
     - return_fields
     - the_works
    """


    def __init__(self, return_fields=None, the_works=None,):
        self.return_fields = return_fields
        self.the_works = the_works

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.return_fields = []
                    (_etype26, _size23) = iprot.readListBegin()
                    for _i27 in range(_size23):
                        _elem28 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.return_fields.append(_elem28)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.the_works = TheWorks()
                    self.the_works.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Param')
        if self.return_fields is not None:
            oprot.writeFieldBegin('return_fields', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.return_fields))
            for iter29 in self.return_fields:
                oprot.writeString(iter29.encode('utf-8') if sys.version_info[0] == 2 else iter29)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.the_works is not None:
            oprot.writeFieldBegin('the_works', TType.STRUCT, 2)
            self.the_works.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Result(object):
    """
    Attributes:
     - the_works
    """


    def __init__(self, the_works=None,):
        self.the_works = the_works

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.the_works = TheWorks()
                    self.the_works.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Result')
        if self.the_works is not None:
            oprot.writeFieldBegin('the_works', TType.STRUCT, 1)
            self.the_works.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AppException(TException):
    """
    Attributes:
     - why
    """


    def __init__(self, why=None,):
        self.why = why

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.why = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AppException')
        if self.why is not None:
            oprot.writeFieldBegin('why', TType.STRING, 1)
            oprot.writeString(self.why.encode('utf-8') if sys.version_info[0] == 2 else self.why)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(TheWorks)
TheWorks.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'field_1', None, None, ),  # 1
    (2, TType.BYTE, 'field_2', None, None, ),  # 2
    (3, TType.I16, 'field_3', None, None, ),  # 3
    (4, TType.I32, 'field_4', None, None, ),  # 4
    (5, TType.I64, 'field_5', None, None, ),  # 5
    (6, TType.DOUBLE, 'field_6', None, None, ),  # 6
    (7, TType.STRING, 'field_7', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'field_8', 'BINARY', None, ),  # 8
    (9, TType.MAP, 'field_9', (TType.I32, None, TType.STRING, 'UTF8', False), None, ),  # 9
    (10, TType.LIST, 'field_10', (TType.I32, None, False), None, ),  # 10
    (11, TType.SET, 'field_11', (TType.STRING, 'UTF8', False), None, ),  # 11
    (12, TType.BOOL, 'field_12', None, None, ),  # 12
)
all_structs.append(Param)
Param.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'return_fields', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.STRUCT, 'the_works', [TheWorks, None], None, ),  # 2
)
all_structs.append(Result)
Result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'the_works', [TheWorks, None], None, ),  # 1
)
all_structs.append(AppException)
AppException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'why', 'UTF8', None, ),  # 1
)
fix_spec(all_structs)
del all_structs
