syntax = "proto3";

package envoy.extensions.filters.http.jwt_authn;

import "envoy/extensions/filters/http/jwt_authn/v3/config.proto";
import "test/fuzz/common.proto";
import "validate/validate.proto";

message JwtAuthnFuzzInput {
  envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication config = 1
      [(validate.rules).message = {required: true}];

  // HTTP request data.
  test.fuzz.HttpData request_data = 2 [(validate.rules).message = {required: true}];

  // If empty, remote_jwks_fetch fails.
  string remote_jwks = 3;

  // per_route
  envoy.extensions.filters.http.jwt_authn.v3.PerRouteConfig per_route = 4;

  // the selector for the filter state
  string filter_state_selector = 6;

  bool force_jwt_expired = 7;
  bool filter_on_destroy = 8;

  // number of times to make the call, 0 < x < 5
  uint32 num_calls = 5 [(validate.rules).uint32 = {gt: 0 lt: 5}];
}
