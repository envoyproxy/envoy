syntax = "proto3";
package envoy.extensions.filters.http.ext_authz;

import "envoy/config/core/v3/base.proto";
import "envoy/extensions/filters/http/ext_authz/v3/ext_authz.proto";
import "envoy/service/auth/v3/external_auth.proto";
import "test/fuzz/common.proto";
import "validate/validate.proto";

// We only fuzz a single request per iteration.
message ExtAuthzTestCaseBase {
  envoy.extensions.filters.http.ext_authz.v3.ExtAuthz config = 1
      [(validate.rules).message = {required: true}];
  // HTTP request data.
  test.fuzz.HttpData request_data = 2 [(validate.rules).message = {required: true}];
  // Filter metadata.
  envoy.config.core.v3.Metadata filter_metadata = 4;
}

message ExtAuthzTestCaseGrpc {
  ExtAuthzTestCaseBase base = 1 [(validate.rules).message = {required: true}];

  oneof response_or_failure_reason {
    // Full auth check result. Note it is not validated to simulate an untrusted authz server (i.e.
    // it can contain garbage mutations).
    envoy.service.auth.v3.CheckResponse response = 2 [(validate.rules).message.skip = true];
    // If this is set onFailure will be called instead of onSuccess.
    string failure_reason = 3;
  }
}

message ExtAuthzTestCaseHttp {
  ExtAuthzTestCaseBase base = 1 [(validate.rules).message = {required: true}];

  enum AuthResult {
    // Possible results for a check call. Taken from
    // https://github.com/envoyproxy/envoy/blob/945b5833f094dee31d2971cee8d40553bb0fe714/source/extensions/filters/common/ext_authz/ext_authz.h#L65
    OK = 0;
    DENIED = 1;
    ERROR = 2;
  }
  // Set default auth check result.
  AuthResult result = 3 [(validate.rules).enum.defined_only = true];
}
