---
node:
  id: upstream-node
  cluster: upstream-cluster

# Enable reverse connection bootstrap extension
bootstrap_extensions:
- name: envoy.bootstrap.reverse_tunnel.upstream_socket_interface
  typed_config:
    "@type": >-
      type.googleapis.com/envoy.extensions.bootstrap.reverse_tunnel.upstream_socket_interface.v3.UpstreamReverseConnectionSocketInterface
    stat_prefix: "upstream_reverse_connection"

static_resources:
  listeners:
  # Accepts reverse tunnel requests
  - name: rev_conn_api_listener
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 9000
    filter_chains:
    - filters:
      - name: envoy.filters.network.reverse_tunnel
        typed_config:
          "@type": >-
            type.googleapis.com/envoy.extensions.filters.network.reverse_tunnel.v3.ReverseTunnel
          ping_interval: 2s

  # Listener that will route the downstream request to the reverse connection cluster
  - name: egress_listener
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 8085
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        typed_config:
          "@type": >-
            type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: egress_http
          route_config:
            virtual_hosts:
            - name: backend
              domains:
              - "*"
              routes:
              - match:
                  prefix: "/downstream_service"
                route:
                  cluster: reverse_connection_cluster
          http_filters:
          - name: envoy.filters.http.router
            typed_config:
              "@type": >-
                type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

  # Cluster used to write requests to cached sockets
  clusters:
  # TODO: Re-enable when reverse_connection cluster extension is merged
  # - name: reverse_connection_cluster
  #   connect_timeout: 200s
  #   lb_policy: CLUSTER_PROVIDED
  #   cluster_type:
  #     name: envoy.clusters.reverse_connection
  #     typed_config:
  #       "@type": >-
  #         type.googleapis.com/envoy.extensions.clusters.reverse_connection.v3.RevConClusterConfig
  #       # The following headers are expected in downstream requests
  #       # to be sent over reverse connections
  #       http_header_names:
  #       - x-remote-node-id  # Should be set to downstream-node
  #       - x-dst-cluster-uuid  # Should be set to downstream
  #   typed_extension_protocol_options:
  #     envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
  #       "@type": >-
  #         type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
  #       explicit_http_config:
  #         # Right the moment, reverse connections are supported over HTTP/2 only
  #         http2_protocol_options: {}

  # Temporary dummy cluster for config validation (remove when reverse_connection is merged).
  - name: reverse_connection_cluster
    type: STATIC
    connect_timeout: 30s
    load_assignment:
      cluster_name: dummy_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: 127.0.0.1
                port_value: 80

admin:
  access_log_path: "/dev/stdout"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8888

layered_runtime:
  layers:
  - name: layer
    static_layer:
      re2.max_program_size.error_level: 1000
      envoy.reloadable_features.reverse_conn_force_local_reply: true
