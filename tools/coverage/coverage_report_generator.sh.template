#!/bin/bash
set -eo pipefail

WORKSPACE_PATH="@@WORKSPACE_PATH@@"

while [[ $# -gt 0 ]]; do
    case "$1" in
        --reports_file=*)
            REPORTS_FILE="${1#*=}"
            ;;
        --output_file=*)
            OUTPUT_FILE="${1#*=}"
            ;;
        *)
            echo "Unknown argument: $1" >&2
            exit 1
            ;;
    esac
    shift
done

# kinda wierd to use PYTHON_RUNFILES but that is what is available in the
# bazel generator customization
GRCOV="${PYTHON_RUNFILES}/envoy/tools/coverage/grcov_bin"
GRCOV_CONFIG="${PYTHON_RUNFILES}/envoy/tools/coverage/grcov_config.json"
JQ_BIN="$(find . -type f -o -type l -name jq | head -n1)"
ZSTD_BIN="$(find . -type f -o -type l -name zstd | head -n1)"
TEMPLATES_DIR="$(dirname "$(find "${PYTHON_RUNFILES}" -name "base.html" -path "*/tools/coverage/templates/*" | head -n1)")"
JQ_FILTER="$(find "${PYTHON_RUNFILES}" -name "markdown_to_json.jq" -path "*/tools/coverage/*" | head -1)"

# This is a little hacky
cwd="$(basename "$PWD")"
if [[ "$cwd" == "envoy_mobile" ]]; then
    WORKSPACE_PATH="${WORKSPACE_PATH}/mobile"
fi

if [[ -z "$WORKSPACE_PATH" || ! -e "$WORKSPACE_PATH" ]]; then
    echo "WARNING: WORKSPACE not set or not found, unable to process coverage" >&2
    exit 1
fi
if [[ -z "$JQ_BIN" || ! -x "$JQ_BIN" ]]; then
    echo "WARNING: jq not found, unable to process coverage" >&2
    exit 1
fi
if [[ -z "$ZSTD_BIN" || ! -x "$ZSTD_BIN" ]]; then
    echo "WARNING: zstd not found, unable to process coverage" >&2
    exit 1
fi
if [[ -z "$GRCOV" || ! -x "$GRCOV" ]]; then
    echo "WARNING: grcov not found, unable to process coverage" >&2
    exit 1
fi
if [[ -z "$GRCOV_CONFIG" || ! -e "$GRCOV_CONFIG" ]]; then
    echo "WARNING: GRCOV_CONFIG not found, unable to process coverage" >&2
    exit 1
fi
if [[ -z "$REPORTS_FILE" || ! -e "$REPORTS_FILE" ]]; then
    echo "WARNING: REPORTS_FILE not found, unable to process coverage" >&2
    exit 1
fi
if [[ -z "$OUTPUT_FILE" ]]; then
    echo "WARNING: OUTPUT_FILE not found, unable to process coverage" >&2
    exit 1
fi

# shellcheck disable=SC2016
$JQ_BIN --arg tpl_dir "$TEMPLATES_DIR" \
  '.templates["base.html"] = ($tpl_dir + "/base.html")
   | .templates["index.html"] = ($tpl_dir + "/index.html")
   | .templates["macros.html"] = ($tpl_dir + "/macros.html")' \
  "$GRCOV_CONFIG" > grcov_config_updated.json

INFO_FILES=()
while IFS= read -r dat_file; do
    if [[ ! -f "$dat_file" ]]; then
        continue
    fi
    dat_file_abs=$(realpath "$dat_file")
    dat_dir=$(dirname "$dat_file_abs")
    dat_basename=$(basename "$dat_file_abs")
    info_basename="${dat_basename%.dat}.info"
    pushd "$dat_dir" > /dev/null
    ln -sf "$dat_basename" "$info_basename"
    popd > /dev/null
    info_link="${dat_dir}/${info_basename}"
    INFO_FILES+=("$info_link")
done < "$REPORTS_FILE"

HTML_OUTPUT_DIR="output"
rm -rf "${HTML_OUTPUT_DIR}"
mkdir -p "${HTML_OUTPUT_DIR}"
"$GRCOV" \
    "${INFO_FILES[@]}" \
    -s "${WORKSPACE_PATH}" \
    -t html,markdown \
    --output-config-file grcov_config_updated.json \
    -o "${HTML_OUTPUT_DIR}"

$JQ_BIN -Rs -f "$JQ_FILTER" "${HTML_OUTPUT_DIR}/markdown.md" > "${HTML_OUTPUT_DIR}/coverage.json"
rm -rf "${HTML_OUTPUT_DIR}/html/badges"
rm -rf "${HTML_OUTPUT_DIR}/html/coverage.json"
tar -cf - -C "${HTML_OUTPUT_DIR}" . | $ZSTD_BIN -o output.tar.zst
mv output.tar.zst "$OUTPUT_FILE"
