#
# Note to use the outputs created here - this `stage` must be set as a dependency in the relevant stage
# eg:
#
# stage: mystage
# dependsOn: ["env"]
#
# To use a variable as a condition for a `stage` you can specify it as follows:
#
# condition: and(not(canceled()), succeeded(), ne(dependencies.env.outputs['repo.changed.mobileOnly'], 'true'))
#
# To use a variable as a condition for a `job` you can specify it as follows:
#
# job:
#   condition: and(not(canceled()), succeeded(), ne(stageDependencies.env.repo.outputs['changed.mobileOnly'], 'true'))
#
# NB: Avoid using _inclusive_ lists to trigger CI - eg _dont_ only trigger mobile CI if `mobile/` changed.
#  Instead use _exclusive_ bools - eg _do_ suppress other CI if only `mobile/` changed
#
# Note the difference in name resolution when used in stages and jobs.
#
# Note also, other conditions such as `not(canceled())` are not assumed and so need to be added to
# any conditions explicitly.
#
# To use a variable in a `step` you can specify it as follows:
#
# stage: my_next_stage
#   jobs:
#     job: another_job
#     variables:
#       mobileOnly: $[stageDependencies.env.repo.outputs['changed.mobileOnly']]
#     steps:
#     - bash: echo $(mobileOnly)
#

jobs:
# Warm build image caches
- job: cache
  displayName: Cache
  pool:
    vmImage: $(agentUbuntu)
  steps:
  - template: cached.yml
    parameters:
      prime: true
- job: cache_arm
  dependsOn: []
  displayName: Cache (arm64)
  pool: envoy-arm-small
  steps:
  - template: cached.yml
    parameters:
      prime: true
      arch: .arm64

- job: repo
  dependsOn: []
  displayName: Repository
  pool:
    vmImage: $(agentUbuntu)
  steps:
  - checkout: self
    fetchDepth: 0
    fetchTags: true
  - script: ./.azure-pipelines/env/detect-repo-changes.sh
    displayName: "Detect repo changes"
    workingDirectory: $(Build.SourcesDirectory)
    name: changed
    env:
      BUILD_REASON: $(Build.Reason)
      TARGET_BRANCH: $(System.PullRequest.TargetBranch)

  - script: ./.azure-pipelines/env/set-dev-release-envs.sh
    displayName: Set development/release env
    workingDirectory: $(Build.SourcesDirectory)
    name: state
    env:
      BUILD_REASON: $(Build.Reason)
      TARGET_BRANCH: $(System.PullRequest.TargetBranch)

  - script: ./.azure-pipelines/env/decide-what-to-run.sh
    displayName: "Decide what to run"
    workingDirectory: $(Build.SourcesDirectory)
    name: run
    env:
      BUILD_REASON: $(Build.Reason)

  - script: ./.azure-pipelines/env/decide-what-to-publish.sh
    displayName: "Decide what to publish"
    workingDirectory: $(Build.SourcesDirectory)
    name: publish
    env:
      BUILD_REASON: $(Build.Reason)

  - bash: |
      set -e

      echo "env.outputs['changed.mobileOnly']: $(changed.mobileOnly)"
      echo "env.outputs['changed.docsOnly']: $(changed.docsOnly)"
      echo "env.outputs['changed.examplesOnly']: $(changed.examplesOnly)"
      echo
      echo "env.outputs['state.isDev']: $(state.isDev)"
      echo "env.outputs['state.versionPatch']: $(state.versionPatch)"
      echo
      echo "env.outputs['run.build']: $(run.build)"
      echo "env.outputs['run.checks']: $(run.checks)"
      echo "env.outputs['run.packaging']: $(run.packaging)"
      echo "env.outputs['run.releaseTests']: $(run.releaseTests)"
      echo
      echo "env.outputs['publish.githubRelease']: $(publish.githubRelease)"
      echo "env.outputs['publish.dockerhub]: $(publish.dockerhub)"

    displayName: "Print build environment"

- job: test_artifacts
  dependsOn: []
  displayName: Test artifacts
  condition: ne(variables['Build.DefinitionName'], 'envoy-postsubmit')
  pool:
    vmImage: $(agentUbuntu)
  steps:
  - script: $(Build.SourcesDirectory)/.azure-pipelines/gpg/generate-test-key.sh
    displayName: "Generate snakeoil GPG key for testing"
    workingDirectory: $(Build.StagingDirectory)
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: "$(Build.StagingDirectory)/envoy"
      artifactName: test.env
    timeoutInMinutes: 10
