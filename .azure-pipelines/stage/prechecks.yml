parameters:
- name: bucketGCP
  type: string
  default: ""
- name: concurrencyPrechecks
  displayName: "Prechecks concurrency"
  type: number
  default: 10
- name: cacheTestResults
  displayName: "Cache test results"
  type: boolean
  default: true

# Auth
- name: authGCP
  type: string
  default: ""
- name: authGPGPassphrase
  type: string
  default: ""
- name: authGPGPath
  type: string
  default: ""
- name: authGPGKey
  type: string
  default: ""

- name: runBuild
  displayName: "Run build"
  type: string
  default: true
- name: runPrechecks
  displayName: "Run prechecks"
  type: string
  default: true

# Timeout/s
- name: timeoutPrechecks
  type: number
  # Building the rst from protos can take a while even with RBE if there is
  # a lot of change - eg protobuf changed, or a primitve proto changed.
  default: 40

- name: bazelConfigRBE
  type: string
  default: --config=remote-ci --config=rbe-google --jobs=$(RbeJobs)


jobs:
- job: prechecks
  displayName: Precheck
  timeoutInMinutes: ${{ parameters.timeoutPrechecks }}
  condition: |
    and(not(canceled()),
        eq(${{ parameters.runPrechecks }}, 'true'))
  pool:
    vmImage: $(agentUbuntu)
  variables:
    CI_TARGET: ""
  strategy:
    maxParallel: ${{ parameters.concurrencyPrechecks }}
    matrix:
      format:
        CI_TARGET: "format"
        CI_CACHE: format
      protobuf:
        CI_TARGET: "check_and_fix_proto_format"
        CI_CACHE: check_and_fix_proto_format
      ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
        publishing:
          CI_TARGET: docs
          CI_CACHE: docs

  steps:
  - template: ../ci.yml
    parameters:
      bazelBuildExtraOptions: --config=docs-ci
      ciTarget: $(CI_TARGET)
      cacheName: $(CI_CACHE)
      cacheTestResults: ${{ parameters.cacheTestResults }}
      cacheVersion: $(cacheKeyBazel)
      publishEnvoy: false
      publishTestResults: false
      stepsPre:
      ## Ensure we can sign things
      # Signing on the host
      - template: ../gpg.yml
        parameters:
          condition: and(not(canceled()), eq(variables['CI_TARGET'], 'docs'))
          authGPGPassphrase: ${{ parameters.authGPGPassphrase }}
          authGPGPath: ${{ parameters.authGPGPath }}
          authGPGKey: ${{ parameters.authGPGKey }}
      - bash: |
          set -e
          echo AUTHORITY > /tmp/authority
          gpg --clearsign /tmp/authority
          cat /tmp/authority.asc
          gpg --verify /tmp/authority.asc
          rm -rf ~/.gnupg
        displayName: "Ensure host CI can sign with GPG"
        condition: and(not(canceled()), eq(variables['CI_TARGET'], 'docs'))

      # Signing in the Docker container
      - template: ../gpg.yml
        parameters:
          condition: and(not(canceled()), eq(variables['CI_TARGET'], 'docs'))
          # Reuse key downloaded above
          downloadKey: false
          nameDownloadTask: MaintainerGPGKey2
          authGPGPassphrase: ${{ parameters.authGPGPassphrase }}
          authGPGPath: ${{ parameters.authGPGPath }}
          authGPGKey: ${{ parameters.authGPGKey }}
          # GNUPGHOME inside the container
          pathGPGConfiguredHome: /build/.gnupg
          pathGPGHome: $(Build.StagingDirectory)/.gnupg
      - bash: |
          set -e
          ci/run_envoy_docker.sh "
              echo AUTHORITY > /tmp/authority \
              && gpg --clearsign /tmp/authority \
              && cat /tmp/authority.asc \
              && gpg --verify /tmp/authority.asc"
          rm -rf $(Build.StagingDirectory)/.gnupg
        displayName: "Ensure container CI can sign with GPG"
        condition: and(not(canceled()), eq(variables['CI_TARGET'], 'docs'))

      # Docker regression tests
      - script: |
          DOCKER_CI_FIX_DIFF=$(Build.StagingDirectory)/fix_docker.diff DOCKER_CI_FIX=1 ci/test_docker_ci.sh
        workingDirectory: $(Build.SourcesDirectory)
        displayName: Docker build regression test
        condition: eq(variables['CI_TARGET'], 'docs')
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: "$(Build.StagingDirectory)/fix_docker.diff"
          artifactName: "docker_ci"
        timeoutInMinutes: 10
        condition: and(failed(), eq(variables['CI_TARGET'], 'docs'))

      # Dockerhub readme publishing
      - script: |
          ci/run_envoy_docker.sh 'ci/do_ci.sh dockerhub-readme'
        displayName: "Dockerhub publishing test"
        env:
          GCS_ARTIFACT_BUCKET: ${{ parameters.bucketGCP }}
        condition: eq(variables['CI_TARGET'], 'docs')

      stepsPost:

      # Format fixes
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: "$(Build.StagingDirectory)/fix_format.diff"
          artifactName: format
        timeoutInMinutes: 10
        # not all have fixes so improve condition/handling
        condition: and(failed(), eq(variables['CI_TARGET'], 'format'))
      # Protobuf fixes
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: "$(Build.StagingDirectory)/fix_proto_format.diff"
          artifactName: format
        timeoutInMinutes: 10
        condition: and(failed(), eq(variables['CI_TARGET'], 'check_and_fix_proto_format'))

      # Publish docs
      - script: ci/run_envoy_docker.sh 'ci/do_ci.sh docs-upload'
        displayName: "Upload Docs to GCS"
        env:
          GCS_ARTIFACT_BUCKET: ${{ parameters.bucketGCP }}
        condition: eq(variables['CI_TARGET'], 'docs')

- job: precheck_release_x64
  displayName: Precheck release (x64)
  condition: |
    and(not(canceled()),
        eq(${{ parameters.runBuild }}, 'true'))
  timeoutInMinutes: 180
  pool: envoy-x64-large
  steps:
  - template: ../ci.yml
    parameters:
      artifactName: release
      ciTarget: release.test_only
      cacheName: release-test-only
      bazelConfigRBE: ${{ parameters.bazelConfigRBE }}
      cacheTestResults: ${{ parameters.cacheTestResults }}
      cacheVersion: $(cacheKeyBazel)
      rbe: true

- job: precheck_release_arm64
  displayName: Precheck release (arm64)
  condition: |
    and(not(canceled()),
        eq(${{ parameters.runBuild }}, 'true'))
  timeoutInMinutes: 180
  pool: envoy-arm-large
  steps:
  - template: ../ci.yml
    parameters:
      artifactName: release
      ciTarget: release.test_only
      cacheName: release-test-only
      bazelConfigRBE: ${{ parameters.bazelConfigRBE }}
      bazelBuildExtraOptions: "--sandbox_base=/tmp/sandbox_base"
      cacheTestResults: ${{ parameters.cacheTestResults }}
      cacheVersion: $(cacheKeyBazel)
      artifactSuffix: .arm64
      rbe: false

- job: prechecked
  displayName: Prechecked
  dependsOn: ["prechecks", "precheck_release_arm64", "precheck_release_x64"]
  pool:
    vmImage: $(agentUbuntu)
  # This condition ensures that this (required) job passes if all of
  # the preceeding jobs either pass or are skipped
  # adapted from:
  #  https://learn.microsoft.com/en-us/azure/devops/pipelines/process/expressions?view=azure-devops#job-to-job-dependencies-within-one-stage
  condition: |
    and(
      eq(variables['Build.Reason'], 'PullRequest'),
      in(dependencies.prechecks.result, 'Succeeded', 'SucceededWithIssues', 'Skipped'),
      in(dependencies.precheck_release_arm64.result, 'Succeeded', 'SucceededWithIssues', 'Skipped'))
  steps:
  - checkout: none
  - bash: |
      echo "Prechecked"
