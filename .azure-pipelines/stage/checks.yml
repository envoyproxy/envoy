parameters:
- name: bucketGCP
  type: string
  default: ""
- name: cacheTestResults
  displayName: "Cache test results"
  type: boolean
  default: true
- name: concurrencyChecks
  displayName: "Checks concurrency"
  type: number
  default: 10

# Auth
- name: authGithub
  type: string
  default: ""
- name: authGCP
  type: string
  default: ""

- name: runChecks
  displayName: "Run checks"
  type: string
  default: true


jobs:
- job: bazel
  displayName: "Linux x64"
  dependsOn: []
  condition: |
    and(not(canceled()),
        eq(${{ parameters.runChecks }}, 'true'))
  variables:
    REPO_FETCH_DEPTH: 1
    REPO_FETCH_TAGS: false
    PUBLISH_TEST_RESULTS: true
    PUBLISH_ENVOY: true
  strategy:
    maxParallel: ${{ parameters.concurrencyChecks }}
    matrix:
      # These are ordered by most time-consuming first.
      coverage:
        CI_TARGET: "coverage"
      fuzz_coverage:
        CI_TARGET: "fuzz_coverage"
      compile_time_options:
        CI_TARGET: "compile_time_options"
        ENVOY_FILTER_EXAMPLE: true
      tsan:
        CI_TARGET: "tsan"
      asan:
        CI_TARGET: "asan"
        ENVOY_FILTER_EXAMPLE: true
      # Disabled due to https://github.com/envoyproxy/envoy/pull/18218
      # api_compat:
      #  CI_TARGET: "api_compat"
      gcc:
        CI_TARGET: "gcc"
      msan:
        CI_TARGET: "msan"
        ENVOY_FILTER_EXAMPLE: true
      #
      # Temporarily disabled to facilitate release CI, should be resolved
      #    as part of https://github.com/envoyproxy/envoy/issues/28566
      #
      # clang_tidy:
      #   CI_TARGET: "clang_tidy"
      #   REPO_FETCH_DEPTH: 0
      #   REPO_FETCH_TAGS: true
      #   PUBLISH_TEST_RESULTS: false
      #   PUBLISH_ENVOY: false
      api:
        CI_TARGET: "api"
  timeoutInMinutes: 180
  pool:
    vmImage: $(agentUbuntu)
  steps:
  - template: ../ci.yml
    parameters:
      ciTarget: $(CI_TARGET)
      cacheName: $(CI_TARGET)
      envoyBuildFilterExample: $(ENVOY_FILTER_EXAMPLE)
      cacheTestResults: ${{ parameters.cacheTestResults }}
      diskspaceHack: true
      managedAgent: false
      repoFetchDepth: $(REPO_FETCH_DEPTH)
      repoFetchTags: $(REPO_FETCH_TAGS)
      pathCacheTemp: /tmp/cache
      publishTestResults: variables.PUBLISH_TEST_RESULTS
      publishEnvoy: variables.PUBLISH_ENVOY
      tmpfsDockerDisabled: true
      stepsPost:
      # TODO(phlax): consolidate "fix" paths/jobs
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: "$(Build.StagingDirectory)/tmp/lint-fixes"
          artifactName: "$(CI_TARGET).fixes"
        timeoutInMinutes: 10
        condition: and(failed(), eq(variables['CI_TARGET'], 'clang_tidy'))
      - script: ci/run_envoy_docker.sh 'ci/do_ci.sh $(CI_TARGET)-upload'
        displayName: "Upload $(CI_TARGET) Report to GCS"
        condition: and(not(canceled()), or(eq(variables['CI_TARGET'], 'coverage'), eq(variables['CI_TARGET'], 'fuzz_coverage')))
        env:
          GCS_ARTIFACT_BUCKET: ${{ parameters.bucketGCP }}

- job: complete
  displayName: "Checks complete"
  dependsOn: ["bazel"]
  pool:
    vmImage: $(agentUbuntu)
  # This condition ensures that this (required) check passes if all of
  # the preceding checks either pass or are skipped
  # adapted from:
  #  https://learn.microsoft.com/en-us/azure/devops/pipelines/process/expressions?view=azure-devops#job-to-job-dependencies-within-one-stage
  condition: |
    and(
      eq(variables['Build.Reason'], 'PullRequest'),
      in(dependencies.bazel.result, 'Succeeded', 'SucceededWithIssues', 'Skipped'))
  steps:
  - checkout: none
  - bash: |
      echo "checks complete"
